"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromSimpleField = exports.SimpleFieldDef = void 0;
const tslib_1 = require("tslib");
const widgets_1 = require("@prismicio/types-internal/lib/customtypes/widgets");
const t = tslib_1.__importStar(require("io-ts"));
const BooleanField_1 = require("./BooleanField");
const Color_1 = require("./Color");
const Date_1 = require("./Date");
const Embed_1 = require("./Embed");
const GeoPoint_1 = require("./GeoPoint");
const Image_1 = require("./Image");
const IntegrationField_1 = require("./IntegrationField");
const Link_1 = require("./Link");
const Number_1 = require("./Number");
const Range_1 = require("./Range");
const Select_1 = require("./Select");
const Separator_1 = require("./Separator");
const StructuredText_1 = require("./StructuredText");
const Text_1 = require("./Text");
const Timestamp_1 = require("./Timestamp");
const UID_1 = require("./UID");
exports.SimpleFieldDef = t.union([
    UID_1.UIDDef,
    StructuredText_1.StructuredTextDef,
    Image_1.ImageDef,
    Link_1.LinkDef,
    Date_1.DateDef,
    Timestamp_1.TimestampDef,
    Color_1.ColorDef,
    Number_1.NumberDef,
    Text_1.TextDef,
    Select_1.SelectDef,
    BooleanField_1.BooleanFieldDef,
    Embed_1.EmbedDef,
    GeoPoint_1.GeoPointDef,
    Separator_1.SeparatorDef,
    IntegrationField_1.IntegrationFieldDef,
    Range_1.RangeDef,
]);
function fromSimpleField(key, model) {
    switch (model.type) {
        case widgets_1.WidgetTypes.UID:
            return (0, UID_1.fromUID)(key);
        case widgets_1.WidgetTypes.RichText:
            return (0, StructuredText_1.fromRichText)(key);
        case widgets_1.WidgetTypes.Image:
            return (0, Image_1.fromImage)(key, model);
        case widgets_1.WidgetTypes.Link:
            return (0, Link_1.fromLink)(key, model);
        case widgets_1.WidgetTypes.Date:
            return (0, Date_1.fromDate)(key);
        case widgets_1.WidgetTypes.Timestamp:
            return (0, Timestamp_1.fromTimestamp)(key);
        case widgets_1.WidgetTypes.Color:
            return (0, Color_1.fromColor)(key);
        case widgets_1.WidgetTypes.Number:
            return (0, Number_1.fromNumber)(key);
        case widgets_1.WidgetTypes.Text:
            return (0, Text_1.fromText)(key);
        case widgets_1.WidgetTypes.Select:
            return (0, Select_1.fromSelect)(key, model);
        case widgets_1.WidgetTypes.BooleanField:
            return (0, BooleanField_1.fromBoolean)(key, model);
        case widgets_1.WidgetTypes.Embed:
            return (0, Embed_1.fromEmbed)(key);
        case widgets_1.WidgetTypes.GeoPoint:
            return (0, GeoPoint_1.fromGeoPoint)(key);
        case widgets_1.WidgetTypes.Separator:
            return (0, Separator_1.fromSeparator)(key);
        case widgets_1.WidgetTypes.IntegrationField:
            return (0, IntegrationField_1.fromIntegrationField)(key);
        case widgets_1.WidgetTypes.Range:
            return (0, Range_1.fromRange)(key);
    }
}
exports.fromSimpleField = fromSimpleField;
