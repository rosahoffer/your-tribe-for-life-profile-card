import { type UID } from "@prismicio/types-internal/lib/customtypes/widgets";
import type { NestableWidget } from "@prismicio/types-internal/lib/customtypes/widgets/nestable";
import * as t from "io-ts";
export declare const SimpleFieldDef: t.UnionC<[t.Type<{
    uid: string;
}, {
    readonly name: string;
    readonly __TYPE__: "UIDDef";
}, unknown>, t.Type<{
    structuredtext: string;
}, {
    readonly name: string;
    readonly __TYPE__: "structuredTextDef";
}, unknown>, t.Type<{
    image: string;
    config: {
        thumbnails: string[];
    };
}, {
    readonly name: string;
    readonly config: {
        thumbnails: string[];
    };
    readonly __TYPE__: "imageDef";
}, unknown>, t.Type<{
    link: string;
    config: {
        select?: "any" | null | undefined;
    } | {
        select: "document";
        customtypes: readonly string[];
    } | {
        select: "media";
    } | {
        select: "web";
    };
}, {
    readonly name: string;
    readonly __TYPE__: "LinkDefType";
    readonly config: ({
        select?: "any" | null | undefined;
    } & {
        __TYPE__: "ConfigAnyLinkDef";
    }) | ({
        select: "document";
        customtypes: readonly string[];
    } & {
        __TYPE__: "ConfigDocumentLinkDef";
    }) | ({
        select: "media";
    } & {
        __TYPE__: "ConfigMediaLinkDef";
    }) | ({
        select: "web";
    } & {
        __TYPE__: "ConfigWebLinkDef";
    });
}, unknown>, t.Type<{
    date: string;
}, {
    readonly name: string;
    readonly __TYPE__: "dateDef";
}, unknown>, t.Type<{
    timestamp: string;
}, {
    readonly name: string;
    readonly __TYPE__: "timestampDef";
}, unknown>, t.Type<{
    color: string;
}, {
    readonly name: string;
    readonly __TYPE__: "colorDef";
}, unknown>, t.Type<{
    number: string;
}, {
    readonly name: string;
    readonly __TYPE__: "numberDef";
}, unknown>, t.Type<{
    text: string;
}, {
    readonly name: string;
    readonly __TYPE__: "textDef";
}, unknown>, t.Type<{
    select: string;
    config: {
        options: readonly string[];
    };
}, {
    readonly name: string;
    readonly config: {
        options: readonly string[];
    };
    readonly __TYPE__: "selectDef";
}, unknown>, t.Type<{
    booleanField: string;
    config: {
        default_value: boolean;
    };
}, {
    readonly name: string;
    readonly __TYPE__: "booleanFieldDef";
}, unknown>, t.Type<{
    embed: string;
}, {
    readonly name: string;
    readonly __TYPE__: "embedDef";
}, unknown>, t.Type<{
    geopoint: string;
}, {
    readonly name: string;
    readonly __TYPE__: "geopointDef";
}, unknown>, t.Type<{
    separator: string;
}, {
    readonly name: string;
    readonly __TYPE__: "separatorDef";
}, unknown>, t.Type<{
    integrationFields: string;
}, {
    readonly name: string;
    readonly __TYPE__: "integrationFieldDef";
}, unknown>, t.Type<{
    range: string;
}, {
    readonly name: string;
    readonly __TYPE__: "RangeDef";
}, unknown>]>;
export declare type SimpleFieldDef = t.TypeOf<typeof SimpleFieldDef>;
export declare type SimpleFieldDefO = t.OutputOf<typeof SimpleFieldDef>;
export declare function fromSimpleField(key: string, model: NestableWidget | UID): SimpleFieldDef;
