import type { Link } from "@prismicio/types-internal/lib/customtypes/widgets/nestable";
import { LinksTypes } from "@prismicio/types-internal/lib/documents/widgets/nestable/Link";
import * as t from "io-ts";
export declare const LinkDefType = "LinkDefType";
export declare const LinkDef: t.Type<{
    link: string;
    config: {
        select?: "any" | null | undefined;
    } | {
        select: "document";
        customtypes: readonly string[];
    } | {
        select: "media";
    } | {
        select: "web";
    };
}, {
    readonly name: string;
    readonly __TYPE__: "LinkDefType";
    readonly config: ({
        select?: "any" | null | undefined;
    } & {
        __TYPE__: "ConfigAnyLinkDef";
    }) | ({
        select: "document";
        customtypes: readonly string[];
    } & {
        __TYPE__: "ConfigDocumentLinkDef";
    }) | ({
        select: "media";
    } & {
        __TYPE__: "ConfigMediaLinkDef";
    }) | ({
        select: "web";
    } & {
        __TYPE__: "ConfigWebLinkDef";
    });
}, unknown>;
export declare type LinkDef = t.TypeOf<typeof LinkDef>;
export declare type LinkDefO = t.OutputOf<typeof LinkDef>;
export declare function fromLink(key: string, model: Link): LinkDef;
export declare function defaultLinkDef(type: typeof LinksTypes.DocumentLink | typeof LinksTypes.ImageLink | typeof LinksTypes.ExternalLink | typeof LinksTypes.FileLink): LinkDefO;
export declare const isMediaLinkDef: (linkDef: LinkDefO) => boolean;
export declare const isAnyLinkDef: (linkDef: LinkDefO) => boolean;
export declare const isDocumentLinkDef: (linkDef: LinkDefO) => boolean;
export declare const isWebLinkDef: (linkDef: LinkDefO) => boolean;
export * from "./AnyLink";
export * from "./DocumentLink";
export * from "./MediaLink";
export * from "./WebLink";
