import type { Group } from "@prismicio/types-internal/lib/customtypes/widgets";
import * as t from "io-ts";
export declare const GroupDefType = "groupDef";
export declare const GroupDef: t.Type<{
    name: string;
    fields: ({
        booleanField: string;
        config: {
            default_value: boolean;
        };
    } | {
        color: string;
    } | {
        date: string;
    } | {
        embed: string;
    } | {
        geopoint: string;
    } | {
        image: string;
        config: {
            thumbnails: string[];
        };
    } | {
        integrationFields: string;
    } | {
        link: string;
        config: {
            select?: "any" | null | undefined;
        } | {
            select: "document";
            customtypes: readonly string[];
        } | {
            select: "media";
        } | {
            select: "web";
        };
    } | {
        number: string;
    } | {
        range: string;
    } | {
        select: string;
        config: {
            options: readonly string[];
        };
    } | {
        separator: string;
    } | {
        structuredtext: string;
    } | {
        text: string;
    } | {
        timestamp: string;
    } | {
        uid: string;
    })[];
}, {
    name: string;
    fields: ({
        readonly name: string;
        readonly __TYPE__: "booleanFieldDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "colorDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "dateDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "embedDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "geopointDef";
    } | {
        readonly name: string;
        readonly config: {
            thumbnails: string[];
        };
        readonly __TYPE__: "imageDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "integrationFieldDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "LinkDefType";
        readonly config: ({
            select?: "any" | null | undefined;
        } & {
            __TYPE__: "ConfigAnyLinkDef";
        }) | ({
            select: "document";
            customtypes: readonly string[];
        } & {
            __TYPE__: "ConfigDocumentLinkDef";
        }) | ({
            select: "media";
        } & {
            __TYPE__: "ConfigMediaLinkDef";
        }) | ({
            select: "web";
        } & {
            __TYPE__: "ConfigWebLinkDef";
        });
    } | {
        readonly name: string;
        readonly __TYPE__: "numberDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "RangeDef";
    } | {
        readonly name: string;
        readonly config: {
            options: readonly string[];
        };
        readonly __TYPE__: "selectDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "separatorDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "structuredTextDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "textDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "timestampDef";
    } | {
        readonly name: string;
        readonly __TYPE__: "UIDDef";
    })[];
} & {
    __TYPE__: "groupDef";
}, unknown>;
export declare type GroupDef = t.TypeOf<typeof GroupDef>;
export declare type GroupDefO = t.OutputOf<typeof GroupDef>;
export declare function fromGroup(key: string, model: Group): GroupDef;
