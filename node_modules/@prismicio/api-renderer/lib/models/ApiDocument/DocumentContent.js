"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentContent = void 0;
const documents_1 = require("@prismicio/types-internal/lib/documents");
class DocumentContent {
    constructor(data) {
        Object.defineProperty(this, "fieldTypes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fieldPositions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "widgets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "slugs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "uid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // cached parsed Widgets
        // TODO: should use memoization in parseAll and get rid of this
        Object.defineProperty(this, "parsed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        const { widgets, types, positions, slugs, uid } = documents_1.DocumentData.partitionData(data);
        this.fieldTypes = types;
        this.fieldPositions = positions;
        this.slugs = slugs;
        this.uid = uid;
        this.widgets = widgets;
    }
    getWidget(key) {
        const widget = documents_1.DocumentData.getWidget(key, this.widgets, this.fieldTypes, this.fieldPositions, this.parsed);
        this.parsed.set(key, widget);
        return widget;
    }
    parseAll() {
        const parsed = documents_1.DocumentData.fromJson(this.widgets, this.fieldTypes, this.fieldPositions);
        this.parsed = parsed;
        return parsed;
    }
}
exports.DocumentContent = DocumentContent;
