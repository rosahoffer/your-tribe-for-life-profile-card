"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const widgets_1 = require("@prismicio/types-internal/lib/documents/widgets");
const nestable_1 = require("@prismicio/types-internal/lib/documents/widgets/nestable");
const BooleanContent_1 = require("@prismicio/types-internal/lib/documents/widgets/nestable/BooleanContent");
const GeoPointContent_1 = require("@prismicio/types-internal/lib/documents/widgets/nestable/GeoPointContent");
const ImageContent_1 = require("@prismicio/types-internal/lib/documents/widgets/nestable/ImageContent");
const IntegrationFieldsContent_1 = require("@prismicio/types-internal/lib/documents/widgets/nestable/IntegrationFieldsContent");
const LinkContent_1 = require("@prismicio/types-internal/lib/documents/widgets/nestable/Link/LinkContent");
const Array_1 = require("fp-ts/lib/Array");
const O = tslib_1.__importStar(require("fp-ts/lib/Option"));
const models_1 = require("../models");
const fetch_1 = require("../models/fetch");
const utils_1 = require("../utils");
const nestable_2 = require("./nestable");
const UIDRenderer_1 = tslib_1.__importDefault(require("./UIDRenderer"));
function extractSimpleFieldIfAny(field) {
    if (field !== undefined && field.TYPE === fetch_1.SimpleFieldType) {
        return field;
    }
    else {
        return undefined;
    }
}
function extractFetchDocRelationIfAny(field) {
    if (field !== undefined && field.TYPE === fetch_1.DocRelationType) {
        return field;
    }
    else {
        return undefined;
    }
}
const SimpleWidgetRenderer = (ctx) => ({
    renderV1(content, fetch) {
        if (content.__TYPE__ === nestable_1.StructuredTextContentType) {
            return (0, nestable_2.StructuredTextRenderer)(ctx).renderV1(content, extractSimpleFieldIfAny(fetch));
        }
        else if (content.__TYPE__ === ImageContent_1.ImageContentType) {
            return (0, nestable_2.ImageRenderer)(ctx).renderV1(content);
        }
        else if (content.__TYPE__ === widgets_1.WidgetTypes.Field) {
            return nestable_2.FieldRenderer.renderV1(content);
        }
        else if (content.__TYPE__ === LinkContent_1.LinkContentType) {
            return (0, nestable_2.LinkRenderer)(ctx).renderV1(content, extractFetchDocRelationIfAny(fetch));
        }
        else if (content.__TYPE__ === nestable_1.EmbedContentType) {
            return nestable_2.EmbedRenderer.renderV1(content);
        }
        else if (content.__TYPE__ === GeoPointContent_1.GeoPointContentType) {
            return nestable_2.GeoPointRenderer.renderV1(content);
        }
        else if (content.__TYPE__ === widgets_1.UIDContentType) {
            return UIDRenderer_1.default.renderV1(content);
        }
        else if (content.__TYPE__ === IntegrationFieldsContent_1.IntegrationFieldsContentType) {
            return (0, nestable_2.IntegrationFieldsRenderer)(ctx).renderV1(content);
        }
        else if (content.__TYPE__ === nestable_1.SeparatorContentType) {
            return nestable_2.SeparatorRenderer.renderV1(content);
        }
        else if (content.__TYPE__ === BooleanContent_1.BooleanContentType) {
            return nestable_2.BooleanRenderer.renderV1(content);
        }
        else {
            return null;
        }
    },
    renderV2(def, content, fetch) {
        if (def.__TYPE__ === models_1.StructuredTextDefType && nestable_1.StructuredTextContent.is(content)) {
            return (0, nestable_2.StructuredTextRenderer)(ctx).renderV2(def, content, extractSimpleFieldIfAny(fetch));
        }
        else if (def.__TYPE__ === models_1.ImageDefType && nestable_1.ImageContent.is(content)) {
            return (0, nestable_2.ImageRenderer)(ctx).renderV2(def, content);
        }
        else if (def.__TYPE__ === models_1.LinkDefType && nestable_1.Links.LinkContent.is(content)) {
            return (0, nestable_2.LinkRenderer)(ctx).renderV2(def, content, extractFetchDocRelationIfAny(fetch));
        }
        else if (def.__TYPE__ === models_1.EmbedDefType && nestable_1.EmbedContent.is(content)) {
            return nestable_2.EmbedRenderer.renderV2(def, content);
        }
        else if (def.__TYPE__ === models_1.GeoPointDefType && nestable_1.GeoPointContent.is(content)) {
            return nestable_2.GeoPointRenderer.renderV2(def, content);
        }
        else if (def.__TYPE__ === models_1.UIDDefType && widgets_1.UIDContent.is(content)) {
            return UIDRenderer_1.default.renderV2(def, content);
        }
        else if (def.__TYPE__ === models_1.IntegrationFieldDefType && nestable_1.IntegrationFieldsContent.is(content)) {
            return (0, nestable_2.IntegrationFieldsRenderer)(ctx).renderV2(def, content);
        }
        else if (def.__TYPE__ === models_1.SeparatorDefType && nestable_1.SeparatorContent.is(content)) {
            return nestable_2.SeparatorRenderer.renderV2(def, content);
        }
        else if (def.__TYPE__ === models_1.BooleanFieldDefType && nestable_1.BooleanContent.is(content)) {
            return nestable_2.BooleanRenderer.renderV2(def, content);
        }
        else if ((content === null || content === void 0 ? void 0 : content.__TYPE__) === widgets_1.WidgetTypes.Field) {
            return nestable_2.FieldRenderer.renderV2(def, content);
        }
        else {
            return null;
        }
    },
    renderDefault(def) {
        if (def.__TYPE__ === models_1.LinkDefType) {
            return (0, nestable_2.LinkRenderer)(ctx).renderDefault(def);
        }
        else if (def.__TYPE__ === models_1.EmbedDefType) {
            return nestable_2.EmbedRenderer.renderDefault(def);
        }
        else if (def.__TYPE__ === models_1.GeoPointDefType) {
            return nestable_2.GeoPointRenderer.renderDefault(def);
        }
        else if (def.__TYPE__ === models_1.StructuredTextDefType) {
            return (0, nestable_2.StructuredTextRenderer)(ctx).renderDefault(def);
        }
        else if (def.__TYPE__ === models_1.ImageDefType) {
            return (0, nestable_2.ImageRenderer)(ctx).renderDefault(def);
        }
        else if (def.__TYPE__ === models_1.SeparatorDefType) {
            return nestable_2.SeparatorRenderer.renderDefault(def);
        }
        else if (def.__TYPE__ === models_1.UIDDefType) {
            return UIDRenderer_1.default.renderDefault(def);
        }
        else if (def.__TYPE__ === models_1.BooleanFieldDefType) {
            return nestable_2.BooleanRenderer.renderDefault(def);
        }
        else if (def.__TYPE__ === models_1.IntegrationFieldDefType) {
            return (0, nestable_2.IntegrationFieldsRenderer)(ctx).renderDefault(def);
        }
        else {
            return nestable_2.FieldRenderer.renderDefault(def);
        }
    },
    renderMocks(def, content) {
        if (def.__TYPE__ === models_1.StructuredTextDefType && nestable_1.StructuredTextContent.is(content)) {
            return (0, nestable_2.StructuredTextRenderer)(ctx).renderMocks(def, content);
        }
        else if (def.__TYPE__ === models_1.ImageDefType && nestable_1.ImageContent.is(content)) {
            return (0, nestable_2.ImageRenderer)(ctx).renderMocks(def, content);
        }
        else if (def.__TYPE__ === models_1.LinkDefType && nestable_1.Links.LinkContent.is(content)) {
            return (0, nestable_2.LinkRenderer)(ctx).renderMocks(def, content);
        }
        else if (def.__TYPE__ === models_1.EmbedDefType && nestable_1.EmbedContent.is(content)) {
            return nestable_2.EmbedRenderer.renderMocks(def, content);
        }
        else if (def.__TYPE__ === models_1.GeoPointDefType && nestable_1.GeoPointContent.is(content)) {
            return nestable_2.GeoPointRenderer.renderMocks(def, content);
        }
        else if (def.__TYPE__ === models_1.UIDDefType && widgets_1.UIDContent.is(content)) {
            return UIDRenderer_1.default.renderMocks(def, content);
        }
        else if (def.__TYPE__ === models_1.IntegrationFieldDefType && nestable_1.IntegrationFieldsContent.is(content)) {
            return (0, nestable_2.IntegrationFieldsRenderer)(ctx).renderMocks(def, content);
        }
        else if (def.__TYPE__ === models_1.SeparatorDefType && nestable_1.SeparatorContent.is(content)) {
            return nestable_2.SeparatorRenderer.renderMocks(def, content);
        }
        else if (def.__TYPE__ === models_1.BooleanFieldDefType && nestable_1.BooleanContent.is(content)) {
            return nestable_2.BooleanRenderer.renderMocks(def, content);
        }
        else if ((content === null || content === void 0 ? void 0 : content.__TYPE__) === widgets_1.WidgetTypes.Field) {
            return nestable_2.FieldRenderer.renderMocks(def, content);
        }
        else {
            return null;
        }
    },
    renderObjectOfSimpleWidgetV1(content, fetch) {
        const c = content instanceof Array ? content : Object.entries(content);
        return Object.fromEntries((0, Array_1.compact)(c.map(([key, widget]) => {
            if (widgets_1.EmptyContent.is(widget)) {
                return O.none;
            }
            return (0, utils_1.renderIfNoFetchOrFetchDefined)(fetch, key, (f) => O.some([key, this.renderV1(widget, f)]));
        })));
    },
    renderObjectOfSimpleWidgetV2(content, fetch, fieldsDef, renderIfUndefined, renderIfNull) {
        const itemByKey = content instanceof Array ? Object.fromEntries(content) : content;
        const result = {};
        for (const def of fieldsDef) {
            const key = def.name;
            const item = itemByKey[key];
            if (item === undefined) {
                if ((fetch && key in fetch) || !fetch) {
                    result[key] = this.renderDefault(def);
                }
                else if (fetch) {
                    if (renderIfUndefined.withFetch === "default") {
                        result[key] = this.renderDefault(def);
                    }
                }
            }
            else if (widgets_1.EmptyContent.is(item)) {
                if (fetch && key in fetch) {
                    if (renderIfNull.withFetchField === "default") {
                        result[key] = this.renderDefault(def);
                    }
                    else if (renderIfNull.withFetchField === "render") {
                        result[key] = this.renderV2(def, item, fetch[key]);
                    }
                }
                else if (fetch) {
                    if (renderIfNull.withFetch === "default") {
                        result[key] = this.renderDefault(def);
                    }
                }
                else {
                    if (renderIfNull.default === "default") {
                        result[key] = this.renderDefault(def);
                    }
                    else if (renderIfNull.default === "render") {
                        result[key] = this.renderV2(def, item);
                    }
                }
            }
            else {
                const renderedO = (0, utils_1.renderIfNoFetchOrFetchDefined)(fetch, key, (f) => O.some(this.renderV2(def, item, f)));
                if (O.isSome(renderedO)) {
                    result[key] = renderedO.value;
                }
            }
        }
        return result;
    },
    renderObjectOfSimpleWidgetMocks(content, fieldsDef) {
        const itemByKey = content instanceof Array ? Object.fromEntries(content) : content;
        const result = {};
        for (const def of fieldsDef) {
            const key = def.name;
            const item = itemByKey[key];
            if (item === undefined) {
                result[key] = this.renderDefault(def);
            }
            else if (widgets_1.EmptyContent.is(item)) {
                result[key] = this.renderDefault(def);
            }
            else {
                const renderedO = (0, utils_1.renderIfNoFetchOrFetchDefined)(undefined, key, () => O.some(this.renderMocks(def, item)));
                if (O.isSome(renderedO)) {
                    result[key] = renderedO.value;
                }
            }
        }
        return result;
    },
});
exports.default = SimpleWidgetRenderer;
