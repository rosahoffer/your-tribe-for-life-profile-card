"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const widgets_1 = require("@prismicio/types-internal/lib/documents/widgets");
const models_1 = require("../models");
const fetch_1 = require("../models/fetch");
const GroupRenderer_1 = tslib_1.__importDefault(require("./GroupRenderer"));
const SimpleWidgetRenderer_1 = tslib_1.__importDefault(require("./SimpleWidgetRenderer"));
function extractFetchGroupIfAny(fetch) {
    if (fetch !== undefined && fetch.TYPE === fetch_1.GroupType) {
        return fetch;
    }
    else {
        return undefined;
    }
}
function extractFetchFieldIfAny(fetch) {
    if (fetch !== undefined && fetch.TYPE !== fetch_1.GroupType) {
        return fetch;
    }
    else {
        return undefined;
    }
}
const StaticWidgetRenderer = (ctx) => ({
    renderV1(content, fetch) {
        if (content.__TYPE__ === widgets_1.WidgetTypes.Group) {
            return (0, GroupRenderer_1.default)(ctx).renderV1(content, extractFetchGroupIfAny(fetch));
        }
        else {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderV1(content, extractFetchFieldIfAny(fetch));
        }
    },
    renderV2(def, content, fetch) {
        if (widgets_1.SimpleWidgetContent.is(content) && (0, models_1.isSimpleFieldDef)(def)) {
            // todo maybe find an other condition
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderV2(def, content, extractFetchFieldIfAny(fetch));
        }
        else if (content.__TYPE__ === widgets_1.WidgetTypes.Group && def.__TYPE__ === models_1.GroupDefType) {
            return (0, GroupRenderer_1.default)(ctx).renderV2(def, content, extractFetchGroupIfAny(fetch));
        }
        else {
            return this.renderDefault(def);
        }
    },
    renderDefault(def) {
        if (def.__TYPE__ === models_1.GroupDefType) {
            return (0, GroupRenderer_1.default)(ctx).renderDefault(def);
        }
        else {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderDefault(def);
        }
    },
    renderMocks(def, content) {
        if (widgets_1.SimpleWidgetContent.is(content) && (0, models_1.isSimpleFieldDef)(def)) {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderMocks(def, content);
        }
        else if (content.__TYPE__ === widgets_1.WidgetTypes.Group && def.__TYPE__ === models_1.GroupDefType) {
            return (0, GroupRenderer_1.default)(ctx).renderMocks(def, content);
        }
        else {
            return this.renderDefault(def);
        }
    },
});
exports.default = StaticWidgetRenderer;
