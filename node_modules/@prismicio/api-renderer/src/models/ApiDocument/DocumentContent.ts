import { DocumentData } from "@prismicio/types-internal/lib/documents"
import type { WidgetContent, WidgetKey } from "@prismicio/types-internal/lib/documents/widgets"
import type * as O from "fp-ts/lib/Option"

export class DocumentContent {
	fieldTypes: Map<WidgetKey, string>
	fieldPositions: Map<WidgetKey, number>
	widgets: Map<WidgetKey, unknown> = new Map<string, unknown>()
	slugs: ReadonlyArray<string>
	uid: string | undefined

	// cached parsed Widgets
	// TODO: should use memoization in parseAll and get rid of this
	private parsed = new Map<string, O.Option<WidgetContent>>()

	constructor(data: { [p: string]: unknown }) {
		const { widgets, types, positions, slugs, uid } = DocumentData.partitionData(data)
		this.fieldTypes = types
		this.fieldPositions = positions
		this.slugs = slugs
		this.uid = uid
		this.widgets = widgets
	}

	getWidget(key: string): O.Option<WidgetContent> {
		const widget = DocumentData.getWidget(key, this.widgets, this.fieldTypes, this.fieldPositions, this.parsed)
		this.parsed.set(key, widget)
		return widget
	}

	parseAll(): DocumentData {
		const parsed = DocumentData.fromJson(this.widgets, this.fieldTypes, this.fieldPositions)
		this.parsed = parsed
		return parsed
	}
}
