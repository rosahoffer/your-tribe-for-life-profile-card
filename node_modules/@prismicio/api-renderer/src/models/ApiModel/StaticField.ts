import { type Group, type UID, WidgetTypes } from "@prismicio/types-internal/lib/customtypes/widgets"
import type { NestableWidget } from "@prismicio/types-internal/lib/customtypes/widgets/nestable"
import * as t from "io-ts"

import { fromGroup, GroupDef, GroupDefType } from "./Group"
import { type SimpleFieldDefO, fromSimpleField, SimpleFieldDef } from "./SimpleField"

export const StaticDef = t.union([GroupDef, SimpleFieldDef])
export type StaticDef = t.TypeOf<typeof StaticDef>
export type StaticDefO = t.OutputOf<typeof StaticDef>

export function isSimpleFieldDef(staticDef: StaticDefO): staticDef is SimpleFieldDefO {
	return staticDef.__TYPE__ !== GroupDefType
}

export function fromStatic(key: string, model: NestableWidget | UID | Group): StaticDef {
	switch (model.type) {
		case WidgetTypes.Group:
			return fromGroup(key, model)
		default:
			return fromSimpleField(key, model)
	}
}
