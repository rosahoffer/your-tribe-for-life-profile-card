import type { Select } from "@prismicio/types-internal/lib/customtypes/widgets/nestable"
import * as t from "io-ts"
import { mapOutput } from "io-ts-types/lib/mapOutput"

export const SelectDefType = "selectDef"
export const SelectDef = mapOutput(
	t.strict({
		select: t.string,
		config: t.strict({
			options: t.readonlyArray(t.string),
		}),
	}),
	(o) => ({ name: o.select, config: o.config, __TYPE__: SelectDefType } as const),
)
export type SelectDef = t.TypeOf<typeof SelectDef>
export type SelectDefO = t.OutputOf<typeof SelectDef>

export function fromSelect(key: string, model: Select): SelectDef {
	return {
		select: key,
		config: {
			options: model.config?.options || [],
		},
	}
}
