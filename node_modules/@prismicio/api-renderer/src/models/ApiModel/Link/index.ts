import type { Link } from "@prismicio/types-internal/lib/customtypes/widgets/nestable"
import { LinksTypes } from "@prismicio/types-internal/lib/documents/widgets/nestable/Link"
import * as t from "io-ts"
import { mapOutput } from "io-ts-types/lib/mapOutput"

import { AnyLinkDef, AnyLinkDefType, fromAnyLink } from "./AnyLink"
import { defaultDocumentLinkDef, DocumentLinkDef, DocumentLinkDefType, fromDocumentLink } from "./DocumentLink"
import { defaultMediaLinkDef, fromMediaLink, MediaLinkDef, MediaLinkDefType } from "./MediaLink"
import { defaultWebLinkDef, fromWebLink, WebLinkDef, WebLinkDefType } from "./WebLink"

const LinkDefConfig = t.union([MediaLinkDef, DocumentLinkDef, WebLinkDef, AnyLinkDef])

type LinkDefConfig = t.OutputOf<typeof LinkDefConfig>

export const LinkDefType = "LinkDefType"
export const LinkDef = mapOutput(
	t.strict({
		link: t.string,
		config: LinkDefConfig,
	}),
	(o) => ({ name: o.link, __TYPE__: LinkDefType, config: o.config } as const),
)
export type LinkDef = t.TypeOf<typeof LinkDef>
export type LinkDefO = t.OutputOf<typeof LinkDef>

export function fromLink(key: string, model: Link): LinkDef {
	const config = (() => {
		switch (model.config?.select) {
			case "document":
				return fromDocumentLink(model)
			case "media":
				return fromMediaLink(model)
			case "web":
				return fromWebLink(model)
			default:
				return fromAnyLink(model)
		}
	})()

	return { link: key, config }
}

export function defaultLinkDef(
	type:
		| typeof LinksTypes.DocumentLink
		| typeof LinksTypes.ImageLink
		| typeof LinksTypes.ExternalLink
		| typeof LinksTypes.FileLink,
): LinkDefO {
	const config: LinkDefConfig = (() => {
		switch (type) {
			case LinksTypes.DocumentLink:
				return defaultDocumentLinkDef()
			case LinksTypes.ImageLink:
			case LinksTypes.FileLink:
				return defaultMediaLinkDef()
			case LinksTypes.ExternalLink:
				return defaultWebLinkDef()
		}
	})()

	return {
		name: "",
		config,
		__TYPE__: "LinkDefType",
	}
}

export const isMediaLinkDef: (linkDef: LinkDefO) => boolean = (linkDef: LinkDefO) =>
	linkDef.config.__TYPE__ === MediaLinkDefType

export const isAnyLinkDef: (linkDef: LinkDefO) => boolean = (linkDef: LinkDefO) =>
	linkDef.config.__TYPE__ === AnyLinkDefType

export const isDocumentLinkDef: (linkDef: LinkDefO) => boolean = (linkDef: LinkDefO) =>
	linkDef.config.__TYPE__ === DocumentLinkDefType

export const isWebLinkDef: (linkDef: LinkDefO) => boolean = (linkDef: LinkDefO) =>
	linkDef.config.__TYPE__ === WebLinkDefType

export * from "./AnyLink"
export * from "./DocumentLink"
export * from "./MediaLink"
export * from "./WebLink"
