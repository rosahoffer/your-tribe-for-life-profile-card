import { type Group, type UID, WidgetTypes } from "@prismicio/types-internal/lib/customtypes/widgets"
import type { NestableWidget } from "@prismicio/types-internal/lib/customtypes/widgets/nestable"
import type { SharedSlice } from "@prismicio/types-internal/lib/customtypes/widgets/slices"
import type { DynamicSlices } from "@prismicio/types-internal/lib/customtypes/widgets/slices/Slices"
import * as t from "io-ts"

import {
	CompositeSliceDefType,
	fromSlices,
	SharedSliceDefType,
	SimpleSliceDefType,
	SliceDef,
	SlicesDef,
	SlicesDefType,
} from "./slices"
import { fromStatic, StaticDef, StaticDefO } from "./StaticField"

export function isStaticFieldDef(mask: WidgetDefO): mask is StaticDefO {
	return (
		mask.__TYPE__ !== SimpleSliceDefType &&
		mask.__TYPE__ !== SharedSliceDefType &&
		mask.__TYPE__ !== CompositeSliceDefType &&
		mask.__TYPE__ !== SlicesDefType
	)
}

export const WidgetDef = t.union([StaticDef, SlicesDef, SliceDef])
export type WidgetDef = t.TypeOf<typeof WidgetDef>
export type WidgetDefO = t.OutputOf<typeof WidgetDef>

export function fromWidget(
	key: string,
	model: NestableWidget | UID | Group | DynamicSlices,
	sharedSlices: Partial<Record<string, SharedSlice>>,
): WidgetDef {
	switch (model.type) {
		case WidgetTypes.LegacySlices:
		case WidgetTypes.Slices:
			return fromSlices(key, model, sharedSlices)
		default:
			return fromStatic(key, model)
	}
}
