import { type UID, WidgetTypes } from "@prismicio/types-internal/lib/customtypes/widgets"
import type { NestableWidget } from "@prismicio/types-internal/lib/customtypes/widgets/nestable"
import * as t from "io-ts"

import { BooleanFieldDef, fromBoolean } from "./BooleanField"
import { ColorDef, fromColor } from "./Color"
import { DateDef, fromDate } from "./Date"
import { EmbedDef, fromEmbed } from "./Embed"
import { fromGeoPoint, GeoPointDef } from "./GeoPoint"
import { fromImage, ImageDef } from "./Image"
import { fromIntegrationField, IntegrationFieldDef } from "./IntegrationField"
import { fromLink, LinkDef } from "./Link"
import { fromNumber, NumberDef } from "./Number"
import { fromRange, RangeDef } from "./Range"
import { fromSelect, SelectDef } from "./Select"
import { fromSeparator, SeparatorDef } from "./Separator"
import { fromRichText, StructuredTextDef } from "./StructuredText"
import { fromText, TextDef } from "./Text"
import { fromTimestamp, TimestampDef } from "./Timestamp"
import { fromUID, UIDDef } from "./UID"

export const SimpleFieldDef = t.union([
	UIDDef,
	StructuredTextDef,
	ImageDef,
	LinkDef,
	DateDef,
	TimestampDef,
	ColorDef,
	NumberDef,
	TextDef,
	SelectDef,
	BooleanFieldDef,
	EmbedDef,
	GeoPointDef,
	SeparatorDef,
	IntegrationFieldDef,
	RangeDef,
])
export type SimpleFieldDef = t.TypeOf<typeof SimpleFieldDef>
export type SimpleFieldDefO = t.OutputOf<typeof SimpleFieldDef>

export function fromSimpleField(key: string, model: NestableWidget | UID): SimpleFieldDef {
	switch (model.type) {
		case WidgetTypes.UID:
			return fromUID(key)
		case WidgetTypes.RichText:
			return fromRichText(key)
		case WidgetTypes.Image:
			return fromImage(key, model)
		case WidgetTypes.Link:
			return fromLink(key, model)
		case WidgetTypes.Date:
			return fromDate(key)
		case WidgetTypes.Timestamp:
			return fromTimestamp(key)
		case WidgetTypes.Color:
			return fromColor(key)
		case WidgetTypes.Number:
			return fromNumber(key)
		case WidgetTypes.Text:
			return fromText(key)
		case WidgetTypes.Select:
			return fromSelect(key, model)
		case WidgetTypes.BooleanField:
			return fromBoolean(key, model)
		case WidgetTypes.Embed:
			return fromEmbed(key)
		case WidgetTypes.GeoPoint:
			return fromGeoPoint(key)
		case WidgetTypes.Separator:
			return fromSeparator(key)
		case WidgetTypes.IntegrationField:
			return fromIntegrationField(key)
		case WidgetTypes.Range:
			return fromRange(key)
	}
}
