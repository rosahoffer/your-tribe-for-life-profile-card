import {
	CompositeSlice,
	LegacySlice,
	SharedSlice,
	SlicesTypes,
} from "@prismicio/types-internal/lib/customtypes/widgets/slices"
import * as t from "io-ts"

import { fromCompositeSlice, fromSharedSlice } from "."
import { CompositeSliceDef } from "./CompositeSlice"
import { SharedSliceDef } from "./SharedSlice"
import { fromSimpleSlice, SimpleSliceDef } from "./SimpleSlice"

export const SliceDef = t.union([SimpleSliceDef, SharedSliceDef, CompositeSliceDef])
export type SliceDef = t.TypeOf<typeof SliceDef>
export type SliceDefO = t.OutputOf<typeof SliceDef>

export function fromSlice(key: string, model: SharedSlice | CompositeSlice | LegacySlice): SliceDef {
	switch (model.type) {
		case SlicesTypes.SharedSlice:
			return fromSharedSlice(key, model)
		case SlicesTypes.Slice:
			return fromCompositeSlice(key, model)
		default:
			return fromSimpleSlice(key, model)
	}
}
