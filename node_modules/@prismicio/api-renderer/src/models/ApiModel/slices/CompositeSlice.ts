import { WidgetTypes } from "@prismicio/types-internal/lib/customtypes/widgets"
import type { CompositeSlice } from "@prismicio/types-internal/lib/customtypes/widgets/slices"
import { addType } from "@prismicio/types-internal/lib/validators/function"
import * as t from "io-ts"

import { fromGroup, GroupDef } from "../Group"
import { fromSimpleField, SimpleFieldDef } from "../SimpleField"

export const CompositeSliceDefType = "compositeSliceDef"
export const CompositeSliceDef = addType(
	t.type({
		name: t.string,
		primary: t.array(SimpleFieldDef),
		items: GroupDef,
	}),
	CompositeSliceDefType,
)
export type CompositeSliceDef = t.TypeOf<typeof CompositeSliceDef>
export type CompositeSliceDefO = t.OutputOf<typeof CompositeSliceDef>

export function fromCompositeSlice(key: string, model: CompositeSlice): CompositeSliceDef {
	return {
		name: key,
		primary: Object.entries(model["non-repeat"] || {}).map(([k, w]) => fromSimpleField(k, w)),
		items: fromGroup(key, {
			type: WidgetTypes.Group,
			config: { fields: model.repeat || {} },
		}),
	}
}
