import type { SharedSlice } from "@prismicio/types-internal/lib/customtypes/widgets/slices"
import { addType } from "@prismicio/types-internal/lib/validators/function"
import * as t from "io-ts"

import { fromSimpleField, SimpleFieldDef } from "../SimpleField"

export const VariationDefType = "variationDef"
export const VariationDef = addType(
	t.strict({
		id: t.string,
		primary: t.array(SimpleFieldDef),
		items: t.array(SimpleFieldDef),
		version: t.string,
	}),
	VariationDefType,
)
export type VariationDef = t.OutputOf<typeof VariationDef>

export const SharedSliceDefType = "sharedSliceDef"
export const SharedSliceDef = addType(
	t.strict({
		name: t.string,
		variations: t.array(VariationDef),
	}),
	SharedSliceDefType,
)
export type SharedSliceDef = t.TypeOf<typeof SharedSliceDef>
export type SharedSliceDefO = t.OutputOf<typeof SharedSliceDef>

export function fromSharedSlice(key: string, model: SharedSlice): SharedSliceDef {
	return {
		name: key,
		variations: model.variations.map((v) => ({
			id: v.id,
			primary: Object.entries(v.primary || {}).map(([k, w]) => fromSimpleField(k, w)),
			items: Object.entries(v.items || {}).map(([k, w]) => fromSimpleField(k, w)),
			version: v.version,
		})),
	}
}
