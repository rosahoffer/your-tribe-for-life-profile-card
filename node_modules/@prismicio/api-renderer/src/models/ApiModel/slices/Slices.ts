import { SharedSlice, SlicesTypes } from "@prismicio/types-internal/lib/customtypes/widgets/slices"
import type { DynamicSlices } from "@prismicio/types-internal/lib/customtypes/widgets/slices/Slices"
import { addType } from "@prismicio/types-internal/lib/validators/function"
import * as t from "io-ts"

import { fromSlice, SliceDef } from "./Slice"

export const SlicesDefType = "slicesDef"
export const SlicesDef = addType(
	t.type({
		name: t.string,
		slices: t.array(SliceDef),
	}),
	SlicesDefType,
)
export type SlicesDef = t.TypeOf<typeof SlicesDef>
export type SlicesDefO = t.OutputOf<typeof SlicesDef>

export function fromSlices(
	key: string,
	model: DynamicSlices,
	sharedSlices: Partial<Record<string, SharedSlice>>,
): SlicesDef {
	return {
		name: key,
		slices: Object.entries(model.config?.choices || {})
			.reduce<Array<SliceDef>>((acc, [key, slice]) => {
				switch (slice.type) {
					case SlicesTypes.SharedSlice: {
						const sharedSliceDef = sharedSlices[key]
						if (!sharedSliceDef) return acc
						return [...acc, fromSlice(key, sharedSliceDef)]
					}
					default:
						return [...acc, fromSlice(key, slice)]
				}
			}, [])
			.filter((s) => s !== undefined),
	}
}
