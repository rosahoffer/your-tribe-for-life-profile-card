import type { CustomType } from "@prismicio/types-internal/lib/customtypes"
import type { SharedSlice } from "@prismicio/types-internal/lib/customtypes/widgets/slices"
import * as t from "io-ts"

import { fromWidget, WidgetDef } from "./WidgetDef"

export const ApiModel = t.strict({
	id: t.string,
	definitions: t.array(WidgetDef),
})

export type ApiModel = t.TypeOf<typeof ApiModel>
export type ApiModelO = t.OutputOf<typeof ApiModel>

export function fromCustomType(model: CustomType, sharedSlices: Partial<Record<string, SharedSlice>>): ApiModel {
	const flattenWidgets = Object.values(model.json)
		.map((tab) => Object.entries(tab))
		.reduce((acc, tabEntries) => [...acc, ...tabEntries], [])

	const definitions = flattenWidgets.map(([key, widget]) => fromWidget(key, widget, sharedSlices))
	return {
		id: model.id,
		definitions,
	}
}

export * from "./BooleanField"
export * from "./Color"
export * from "./Date"
export * from "./Embed"
export * from "./Field"
export * from "./GeoPoint"
export * from "./Group"
export * from "./Image"
export * from "./IntegrationField"
export * from "./Link"
export * from "./Number"
export * from "./Range"
export * from "./Select"
export * from "./Separator"
export * from "./SimpleField"
export * from "./slices"
export * from "./StaticField"
export * from "./StructuredText"
export * from "./Text"
export * from "./Timestamp"
export * from "./UID"
export * from "./WidgetDef"
