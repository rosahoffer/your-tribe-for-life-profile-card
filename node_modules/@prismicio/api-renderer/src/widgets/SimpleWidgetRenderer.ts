import type { SimpleWidgetContent } from "@prismicio/types-internal/lib/documents/widgets"
import { EmptyContent, UIDContent, UIDContentType, WidgetTypes } from "@prismicio/types-internal/lib/documents/widgets"
import {
	BooleanContent,
	EmbedContent,
	EmbedContentType,
	GeoPointContent,
	ImageContent,
	IntegrationFieldsContent,
	Links,
	SeparatorContent,
	SeparatorContentType,
	StructuredTextContent,
	StructuredTextContentType,
} from "@prismicio/types-internal/lib/documents/widgets/nestable"
import { BooleanContentType } from "@prismicio/types-internal/lib/documents/widgets/nestable/BooleanContent"
import { GeoPointContentType } from "@prismicio/types-internal/lib/documents/widgets/nestable/GeoPointContent"
import { ImageContentType } from "@prismicio/types-internal/lib/documents/widgets/nestable/ImageContent"
import { IntegrationFieldsContentType } from "@prismicio/types-internal/lib/documents/widgets/nestable/IntegrationFieldsContent"
import { LinkContentType } from "@prismicio/types-internal/lib/documents/widgets/nestable/Link/LinkContent"
import { compact } from "fp-ts/lib/Array"
import * as O from "fp-ts/lib/Option"

import type { RenderContext } from "../models"
import type { Renderer } from "../models"
import {
	BooleanFieldDefType,
	EmbedDefType,
	FieldDefO,
	GeoPointDefType,
	ImageDefType,
	IntegrationFieldDefType,
	LinkDefType,
	SeparatorDefType,
	SimpleFieldDefO,
	StructuredTextDefType,
	UIDDefType,
} from "../models"
import { DocRelation, DocRelationType, Field, SimpleField, SimpleFieldType } from "../models/fetch"
import { renderIfNoFetchOrFetchDefined } from "../utils"
import {
	BooleanRenderer,
	EmbedRenderer,
	FieldRenderer,
	GeoPointRenderer,
	ImageRenderer,
	IntegrationFieldsRenderer,
	LinkRenderer,
	SeparatorRenderer,
	StructuredTextRenderer,
} from "./nestable"
import UIDRenderer from "./UIDRenderer"

function extractSimpleFieldIfAny(field: Field | undefined): SimpleField | undefined {
	if (field !== undefined && field.TYPE === SimpleFieldType) {
		return field
	} else {
		return undefined
	}
}

function extractFetchDocRelationIfAny(field: Field | undefined): DocRelation | undefined {
	if (field !== undefined && field.TYPE === DocRelationType) {
		return field
	} else {
		return undefined
	}
}

const SimpleWidgetRenderer: (ctx: RenderContext) => Renderer<SimpleFieldDefO, SimpleWidgetContent, Field> & {
	renderObjectOfSimpleWidgetV1(
		content: Array<[string, SimpleWidgetContent]> | Record<string, SimpleWidgetContent>,
		fetch: Record<string, Field> | undefined,
	): object
	renderObjectOfSimpleWidgetV2(
		content: Array<[string, SimpleWidgetContent]> | Record<string, SimpleWidgetContent>,
		fetch: Record<string, Field> | undefined,
		fieldsDef: SimpleFieldDefO[],
		renderIfUndefined: {
			withFetch: "default" | "filter"
		},
		renderIfNull: {
			default: "default" | "render" | "filter"
			withFetch: "default" | "filter"
			withFetchField: "default" | "render" | "filter"
		},
	): Record<string, unknown>
	renderObjectOfSimpleWidgetMocks(
		content: Array<[string, SimpleWidgetContent]> | Record<string, SimpleWidgetContent>,
		fieldsDef: SimpleFieldDefO[],
	): Record<string, unknown>
} = (ctx) => ({
	renderV1(content: SimpleWidgetContent, fetch: Field | undefined): unknown {
		if (content.__TYPE__ === StructuredTextContentType) {
			return StructuredTextRenderer(ctx).renderV1(content, extractSimpleFieldIfAny(fetch))
		} else if (content.__TYPE__ === ImageContentType) {
			return ImageRenderer(ctx).renderV1(content)
		} else if (content.__TYPE__ === WidgetTypes.Field) {
			return FieldRenderer.renderV1(content)
		} else if (content.__TYPE__ === LinkContentType) {
			return LinkRenderer(ctx).renderV1(content, extractFetchDocRelationIfAny(fetch))
		} else if (content.__TYPE__ === EmbedContentType) {
			return EmbedRenderer.renderV1(content)
		} else if (content.__TYPE__ === GeoPointContentType) {
			return GeoPointRenderer.renderV1(content)
		} else if (content.__TYPE__ === UIDContentType) {
			return UIDRenderer.renderV1(content)
		} else if (content.__TYPE__ === IntegrationFieldsContentType) {
			return IntegrationFieldsRenderer(ctx).renderV1(content)
		} else if (content.__TYPE__ === SeparatorContentType) {
			return SeparatorRenderer.renderV1(content)
		} else if (content.__TYPE__ === BooleanContentType) {
			return BooleanRenderer.renderV1(content)
		} else {
			return null
		}
	},

	renderV2(def: SimpleFieldDefO, content: SimpleWidgetContent, fetch: Field | undefined): unknown {
		if (def.__TYPE__ === StructuredTextDefType && StructuredTextContent.is(content)) {
			return StructuredTextRenderer(ctx).renderV2(def, content, extractSimpleFieldIfAny(fetch))
		} else if (def.__TYPE__ === ImageDefType && ImageContent.is(content)) {
			return ImageRenderer(ctx).renderV2(def, content)
		} else if (def.__TYPE__ === LinkDefType && Links.LinkContent.is(content)) {
			return LinkRenderer(ctx).renderV2(def, content, extractFetchDocRelationIfAny(fetch))
		} else if (def.__TYPE__ === EmbedDefType && EmbedContent.is(content)) {
			return EmbedRenderer.renderV2(def, content)
		} else if (def.__TYPE__ === GeoPointDefType && GeoPointContent.is(content)) {
			return GeoPointRenderer.renderV2(def, content)
		} else if (def.__TYPE__ === UIDDefType && UIDContent.is(content)) {
			return UIDRenderer.renderV2(def, content)
		} else if (def.__TYPE__ === IntegrationFieldDefType && IntegrationFieldsContent.is(content)) {
			return IntegrationFieldsRenderer(ctx).renderV2(def, content)
		} else if (def.__TYPE__ === SeparatorDefType && SeparatorContent.is(content)) {
			return SeparatorRenderer.renderV2(def, content)
		} else if (def.__TYPE__ === BooleanFieldDefType && BooleanContent.is(content)) {
			return BooleanRenderer.renderV2(def, content)
		} else if (content?.__TYPE__ === WidgetTypes.Field) {
			return FieldRenderer.renderV2(def as FieldDefO, content)
		} else {
			return null
		}
	},

	renderDefault(def: SimpleFieldDefO): unknown {
		if (def.__TYPE__ === LinkDefType) {
			return LinkRenderer(ctx).renderDefault(def)
		} else if (def.__TYPE__ === EmbedDefType) {
			return EmbedRenderer.renderDefault(def)
		} else if (def.__TYPE__ === GeoPointDefType) {
			return GeoPointRenderer.renderDefault(def)
		} else if (def.__TYPE__ === StructuredTextDefType) {
			return StructuredTextRenderer(ctx).renderDefault(def)
		} else if (def.__TYPE__ === ImageDefType) {
			return ImageRenderer(ctx).renderDefault(def)
		} else if (def.__TYPE__ === SeparatorDefType) {
			return SeparatorRenderer.renderDefault(def)
		} else if (def.__TYPE__ === UIDDefType) {
			return UIDRenderer.renderDefault(def)
		} else if (def.__TYPE__ === BooleanFieldDefType) {
			return BooleanRenderer.renderDefault(def)
		} else if (def.__TYPE__ === IntegrationFieldDefType) {
			return IntegrationFieldsRenderer(ctx).renderDefault(def)
		} else {
			return FieldRenderer.renderDefault(def)
		}
	},

	renderMocks(def: SimpleFieldDefO, content: SimpleWidgetContent): unknown {
		if (def.__TYPE__ === StructuredTextDefType && StructuredTextContent.is(content)) {
			return StructuredTextRenderer(ctx).renderMocks(def, content)
		} else if (def.__TYPE__ === ImageDefType && ImageContent.is(content)) {
			return ImageRenderer(ctx).renderMocks(def, content)
		} else if (def.__TYPE__ === LinkDefType && Links.LinkContent.is(content)) {
			return LinkRenderer(ctx).renderMocks(def, content)
		} else if (def.__TYPE__ === EmbedDefType && EmbedContent.is(content)) {
			return EmbedRenderer.renderMocks(def, content)
		} else if (def.__TYPE__ === GeoPointDefType && GeoPointContent.is(content)) {
			return GeoPointRenderer.renderMocks(def, content)
		} else if (def.__TYPE__ === UIDDefType && UIDContent.is(content)) {
			return UIDRenderer.renderMocks(def, content)
		} else if (def.__TYPE__ === IntegrationFieldDefType && IntegrationFieldsContent.is(content)) {
			return IntegrationFieldsRenderer(ctx).renderMocks(def, content)
		} else if (def.__TYPE__ === SeparatorDefType && SeparatorContent.is(content)) {
			return SeparatorRenderer.renderMocks(def, content)
		} else if (def.__TYPE__ === BooleanFieldDefType && BooleanContent.is(content)) {
			return BooleanRenderer.renderMocks(def, content)
		} else if (content?.__TYPE__ === WidgetTypes.Field) {
			return FieldRenderer.renderMocks(def as FieldDefO, content)
		} else {
			return null
		}
	},

	renderObjectOfSimpleWidgetV1(
		content: Array<[string, SimpleWidgetContent]> | Record<string, SimpleWidgetContent>,
		fetch: Record<string, Field> | undefined,
	): object {
		const c: Array<[string, SimpleWidgetContent]> = content instanceof Array ? content : Object.entries(content)

		return Object.fromEntries(
			compact(
				c.map(([key, widget]) => {
					if (EmptyContent.is(widget)) {
						return O.none
					}

					return renderIfNoFetchOrFetchDefined(fetch, key, (f: Field | undefined) =>
						O.some([key, this.renderV1(widget, f)]),
					)
				}),
			),
		)
	},

	renderObjectOfSimpleWidgetV2(
		content: Array<[string, SimpleWidgetContent]> | Record<string, SimpleWidgetContent>,
		fetch: Record<string, Field> | undefined,
		fieldsDef: SimpleFieldDefO[],
		renderIfUndefined: {
			withFetch: "default" | "filter"
		},
		renderIfNull: {
			default: "default" | "render" | "filter"
			withFetch: "default" | "filter"
			withFetchField: "default" | "render" | "filter"
		},
	): Record<string, unknown> {
		const itemByKey: Record<string, SimpleWidgetContent> =
			content instanceof Array ? Object.fromEntries(content) : content
		const result: Record<string, unknown> = {}

		for (const def of fieldsDef) {
			const key = def.name
			const item = itemByKey[key]
			if (item === undefined) {
				if ((fetch && key in fetch) || !fetch) {
					result[key] = this.renderDefault(def)
				} else if (fetch) {
					if (renderIfUndefined.withFetch === "default") {
						result[key] = this.renderDefault(def)
					}
				}
			} else if (EmptyContent.is(item)) {
				if (fetch && key in fetch) {
					if (renderIfNull.withFetchField === "default") {
						result[key] = this.renderDefault(def)
					} else if (renderIfNull.withFetchField === "render") {
						result[key] = this.renderV2(def, item, fetch[key])
					}
				} else if (fetch) {
					if (renderIfNull.withFetch === "default") {
						result[key] = this.renderDefault(def)
					}
				} else {
					if (renderIfNull.default === "default") {
						result[key] = this.renderDefault(def)
					} else if (renderIfNull.default === "render") {
						result[key] = this.renderV2(def, item)
					}
				}
			} else {
				const renderedO = renderIfNoFetchOrFetchDefined(fetch, key, (f) => O.some(this.renderV2(def, item, f)))
				if (O.isSome(renderedO)) {
					result[key] = renderedO.value
				}
			}
		}

		return result
	},

	renderObjectOfSimpleWidgetMocks(
		content: Array<[string, SimpleWidgetContent]> | Record<string, SimpleWidgetContent>,
		fieldsDef: SimpleFieldDefO[],
	): Record<string, unknown> {
		const itemByKey: Record<string, SimpleWidgetContent> =
			content instanceof Array ? Object.fromEntries(content) : content
		const result: Record<string, unknown> = {}

		for (const def of fieldsDef) {
			const key = def.name
			const item = itemByKey[key]
			if (item === undefined) {
				result[key] = this.renderDefault(def)
			} else if (EmptyContent.is(item)) {
				result[key] = this.renderDefault(def)
			} else {
				const renderedO = renderIfNoFetchOrFetchDefined(undefined, key, () => O.some(this.renderMocks(def, item)))
				if (O.isSome(renderedO)) {
					result[key] = renderedO.value
				}
			}
		}

		return result
	},
})

export default SimpleWidgetRenderer
