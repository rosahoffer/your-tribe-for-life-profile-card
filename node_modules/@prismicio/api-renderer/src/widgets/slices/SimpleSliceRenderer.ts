import { EmptyContentType } from "@prismicio/types-internal/lib/documents/widgets/EmptyContent"
import type { SimpleSliceContent } from "@prismicio/types-internal/lib/documents/widgets/slices"
import * as O from "fp-ts/lib/Option"

import type { RenderContext, SimpleSliceDefO } from "../../models"
import type { GroupOrField } from "../../models/fetch"
import type { SliceRenderer } from "../../models/Renderer"
import StaticWidgetRenderer from "../StaticWidgetRenderer"

const SimpleSliceRenderer: (ctx: RenderContext) => SliceRenderer<SimpleSliceDefO, SimpleSliceContent, GroupOrField> = (
	ctx,
) => ({
	renderV1(content: SimpleSliceContent, fetch: GroupOrField | undefined): unknown {
		if (content.__TYPE__ === EmptyContentType) {
			return O.none
		}

		return O.some({
			value: StaticWidgetRenderer(ctx).renderV1(content, fetch),
		})
	},

	renderV2(def: SimpleSliceDefO, content: SimpleSliceContent, fetch: GroupOrField | undefined): unknown {
		if (content.__TYPE__ === EmptyContentType) {
			return O.none
		}
		return O.some({
			value: StaticWidgetRenderer(ctx).renderV2(def.widget, content, fetch),
		})
	},

	renderDefault(_def: SimpleSliceDefO): unknown {
		return {}
	},

	renderMocks(def: SimpleSliceDefO, content: SimpleSliceContent): unknown {
		if (content.__TYPE__ === EmptyContentType) {
			return O.none
		}
		return O.some({
			value: StaticWidgetRenderer(ctx).renderMocks(def.widget, content),
		})
	},
})

export default SimpleSliceRenderer
