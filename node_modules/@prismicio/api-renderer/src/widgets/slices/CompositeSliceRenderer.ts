import type { CompositeSliceContent } from "@prismicio/types-internal/lib/documents/widgets/slices"

import type { CompositeSliceDefO, RenderContext } from "../../models"
import { CompositeSlice, Group, GroupType } from "../../models/fetch"
import type { SliceRenderer } from "../../models/Renderer"
import { isEmpty } from "../../utils"
import SimpleWidgetRenderer from "../SimpleWidgetRenderer"

const CompositeSliceRenderer: (
	ctx: RenderContext,
) => SliceRenderer<CompositeSliceDefO, CompositeSliceContent, CompositeSlice> = (ctx) => ({
	renderV1(content: CompositeSliceContent, fetch: CompositeSlice | undefined): unknown {
		const repeatFetch = fetch?.repeat?.fields
		const nonRepeatFetch = fetch?.nonRepeat?.fields

		const itemsValue = content.repeat.flatMap((groupItem) => {
			const rendered = SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetV1(groupItem.value, repeatFetch)
			if (isEmpty(rendered)) {
				return []
			}
			return [rendered]
		})
		const primaryValue = SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetV1(content.nonRepeat, nonRepeatFetch)
		return {
			"non-repeat": primaryValue,
			repeat: itemsValue,
		}
	},

	renderV2(def: CompositeSliceDefO, content: CompositeSliceContent, fetch: CompositeSlice | undefined): unknown {
		const repeatFetch: Group | undefined =
			fetch === undefined
				? undefined
				: {
						TYPE: GroupType,
						name: def.name, //doesn't really matter
						fields: fetch.repeat.fields,
				  }

		const nonRepeatFetch = fetch?.nonRepeat?.fields

		const itemsValue = content.repeat.map((items) => {
			return SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetV2(
				items.value,
				repeatFetch?.fields,
				def.items.fields,
				{
					withFetch: "default",
				},
				{
					default: "render",
					withFetch: "filter",
					withFetchField: "render",
				},
			)
		})
		const primaryValue = SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetV2(
			content.nonRepeat,
			nonRepeatFetch,
			def.primary,
			{
				withFetch: "default",
			},
			{
				default: "render",
				withFetch: "filter",
				withFetchField: "render",
			},
		)

		return {
			primary: primaryValue,
			items: itemsValue,
		}
	},

	renderDefault(_def: CompositeSliceDefO): unknown {
		return {}
	},

	renderMocks(def: CompositeSliceDefO, content: CompositeSliceContent): unknown {
		const itemsValue = content.repeat.map((items) => {
			return SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetMocks(items.value, def.items.fields)
		})
		const primaryValue = SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetMocks(content.nonRepeat, def.primary)

		return {
			primary: primaryValue,
			items: itemsValue,
		}
	},
})

export default CompositeSliceRenderer
