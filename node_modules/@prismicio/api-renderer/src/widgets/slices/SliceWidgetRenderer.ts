import {
	type SliceWidgetContent,
	CompositeSliceContentType,
	SharedSliceContentType,
} from "@prismicio/types-internal/lib/documents/widgets/slices"
import * as O from "fp-ts/lib/Option"

import type { RenderContext } from "../../models"
import { CompositeSliceDefType, SharedSliceDefType, SimpleSliceDefType, SliceDefO } from "../../models"
import {
	CompositeSlice,
	CompositeSliceType,
	GroupOrField,
	SharedSlice,
	SharedSliceType,
	Slice,
} from "../../models/fetch"
import type { SliceRenderer } from "../../models/Renderer"
import CompositeSliceRenderer from "./CompositeSliceRenderer"
import SharedSliceRenderer from "./SharedSliceRenderer"
import SimpleSliceRenderer from "./SimpleSliceRenderer"

const Fetch = {
	extractCompositeSlice(fetch: GroupOrField | Slice | undefined): CompositeSlice | undefined {
		if (fetch !== undefined && fetch.TYPE === CompositeSliceType) {
			return fetch
		}
		return undefined
	},
	extractSharedSlice(fetch: GroupOrField | Slice | undefined): SharedSlice | undefined {
		if (fetch !== undefined && fetch.TYPE === SharedSliceType) {
			return fetch
		}
		return undefined
	},
	extractGroupOrField(fetch: GroupOrField | Slice | undefined): GroupOrField | undefined {
		if (fetch !== undefined && fetch.TYPE !== CompositeSliceType && fetch.TYPE !== SharedSliceType) {
			return fetch
		}
		return undefined
	},
}

const SliceWidgetRenderer: (
	ctx: RenderContext,
) => SliceRenderer<SliceDefO, SliceWidgetContent, Slice | GroupOrField> = (ctx) => ({
	renderV1(content: SliceWidgetContent, fetch: Slice | GroupOrField | undefined): unknown {
		if (content.__TYPE__ === CompositeSliceContentType) {
			return O.some(CompositeSliceRenderer(ctx).renderV1(content, Fetch.extractCompositeSlice(fetch)))
		} else if (content.__TYPE__ === SharedSliceContentType) {
			return O.some(SharedSliceRenderer(ctx).renderV1(content, Fetch.extractSharedSlice(fetch)))
		} else {
			return SimpleSliceRenderer(ctx).renderV1(content, Fetch.extractGroupOrField(fetch))
		}
	},

	renderV2(def: SliceDefO, content: SliceWidgetContent, fetch: Slice | GroupOrField | undefined): unknown {
		if (content.__TYPE__ === CompositeSliceContentType) {
			if (def.__TYPE__ === CompositeSliceDefType) {
				return O.some(CompositeSliceRenderer(ctx).renderV2(def, content, Fetch.extractCompositeSlice(fetch)))
			}
		} else if (content && content.__TYPE__ === SharedSliceContentType) {
			if (def.__TYPE__ === SharedSliceDefType) {
				return O.some(SharedSliceRenderer(ctx).renderV2(def, content, Fetch.extractSharedSlice(fetch)))
			}
		} else {
			if (def.__TYPE__ === SimpleSliceDefType) {
				return SimpleSliceRenderer(ctx).renderV2(def, content, Fetch.extractGroupOrField(fetch))
			}
		}
		return O.some(this.renderDefault(def))
	},

	renderDefault(_def: SliceDefO): unknown {
		return {}
	},

	renderMocks(def: SliceDefO, content: SliceWidgetContent): unknown {
		if (content.__TYPE__ === CompositeSliceContentType) {
			if (def.__TYPE__ === CompositeSliceDefType) {
				return O.some(CompositeSliceRenderer(ctx).renderMocks(def, content))
			}
		} else if (content && content.__TYPE__ === SharedSliceContentType) {
			if (def.__TYPE__ === SharedSliceDefType) {
				return O.some(SharedSliceRenderer(ctx).renderMocks(def, content))
			}
		} else {
			if (def.__TYPE__ === SimpleSliceDefType) {
				return SimpleSliceRenderer(ctx).renderMocks(def, content)
			}
		}
		return O.some(this.renderDefault(def))
	},
})

export default SliceWidgetRenderer
