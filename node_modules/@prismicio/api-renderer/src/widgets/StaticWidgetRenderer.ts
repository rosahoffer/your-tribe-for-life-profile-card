import type { StaticWidgetContent } from "@prismicio/types-internal/lib/documents/widgets"
import { SimpleWidgetContent, WidgetTypes } from "@prismicio/types-internal/lib/documents/widgets"

import type { RenderContext, Renderer } from "../models"
import { type StaticDefO, GroupDefType, isSimpleFieldDef } from "../models"
import { Field, Group, GroupOrField, GroupType } from "../models/fetch"
import GroupRenderer from "./GroupRenderer"
import SimpleWidgetRenderer from "./SimpleWidgetRenderer"

function extractFetchGroupIfAny(fetch: GroupOrField | undefined): Group | undefined {
	if (fetch !== undefined && fetch.TYPE === GroupType) {
		return fetch
	} else {
		return undefined
	}
}

function extractFetchFieldIfAny(fetch: GroupOrField | undefined): Field | undefined {
	if (fetch !== undefined && fetch.TYPE !== GroupType) {
		return fetch
	} else {
		return undefined
	}
}

const StaticWidgetRenderer: (ctx: RenderContext) => Renderer<StaticDefO, StaticWidgetContent, GroupOrField> = (
	ctx,
) => ({
	renderV1(content: StaticWidgetContent, fetch: GroupOrField | undefined): unknown {
		if (content.__TYPE__ === WidgetTypes.Group) {
			return GroupRenderer(ctx).renderV1(content, extractFetchGroupIfAny(fetch))
		} else {
			return SimpleWidgetRenderer(ctx).renderV1(content, extractFetchFieldIfAny(fetch))
		}
	},

	renderV2(def: StaticDefO, content: StaticWidgetContent, fetch: GroupOrField | undefined): unknown {
		if (SimpleWidgetContent.is(content) && isSimpleFieldDef(def)) {
			// todo maybe find an other condition
			return SimpleWidgetRenderer(ctx).renderV2(def, content, extractFetchFieldIfAny(fetch))
		} else if (content.__TYPE__ === WidgetTypes.Group && def.__TYPE__ === GroupDefType) {
			return GroupRenderer(ctx).renderV2(def, content, extractFetchGroupIfAny(fetch))
		} else {
			return this.renderDefault(def)
		}
	},

	renderDefault(def: StaticDefO): unknown {
		if (def.__TYPE__ === GroupDefType) {
			return GroupRenderer(ctx).renderDefault(def)
		} else {
			return SimpleWidgetRenderer(ctx).renderDefault(def)
		}
	},

	renderMocks(def: StaticDefO, content: StaticWidgetContent): unknown {
		if (SimpleWidgetContent.is(content) && isSimpleFieldDef(def)) {
			return SimpleWidgetRenderer(ctx).renderMocks(def, content)
		} else if (content.__TYPE__ === WidgetTypes.Group && def.__TYPE__ === GroupDefType) {
			return GroupRenderer(ctx).renderMocks(def, content)
		} else {
			return this.renderDefault(def)
		}
	},
})

export default StaticWidgetRenderer
