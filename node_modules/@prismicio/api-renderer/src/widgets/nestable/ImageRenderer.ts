import type { ImageContentO, ImageContentView } from "@prismicio/types-internal/lib/documents/widgets/nestable"

import type { ImageDefO, RenderContext, Renderer } from "../../models"
import { writeEmptyStringOrNull } from "../../utils"

function renderImageContentView(imageContentView: ImageContentView, ctx: RenderContext) {
	return {
		dimensions: {
			width: imageContentView.width,
			height: imageContentView.height,
		},
		alt: writeEmptyStringOrNull(imageContentView.alt, ctx.emptyStringInsteadOfNull),
		copyright: writeEmptyStringOrNull(imageContentView.credits, ctx.emptyStringInsteadOfNull),
		url: ctx.urlRewriter.rewriteImageUrl(imageContentView),
	}
}

const ImageRenderer: (ctx: RenderContext) => Renderer<ImageDefO, ImageContentO> = (ctx) => ({
	renderV1(content: ImageContentO): unknown {
		if (content.thumbnails) {
			const views = Object.entries(content.thumbnails).reduce((acc, [k, v]) => {
				return {
					...acc,
					[k.toLowerCase()]: renderImageContentView(v, ctx),
				}
			}, {})
			return {
				type: "Image",
				value: { main: renderImageContentView(content, ctx), views: views },
			}
		}
		return {
			type: "Image",
			value: { main: renderImageContentView(content, ctx), views: [] },
		}
	},

	renderV2(_def: ImageDefO, content: ImageContentO): unknown {
		const main = renderImageContentView(content, ctx)
		if (content.thumbnails && content.thumbnails) {
			const views = Object.entries(content.thumbnails).reduce((acc, [k, v]) => {
				return Object.assign(acc, { [k]: renderImageContentView(v, ctx) })
			}, {})

			return Object.assign(main, views)
		}
		return main
	},

	renderDefault(def: ImageDefO): unknown {
		return def.config.thumbnails.reduce((acc, name) => {
			return {
				...acc,
				[name]: {},
			}
		}, {})
	},

	renderMocks(def: ImageDefO, content: ImageContentO): unknown {
		return this.renderV2(def, content)
	},
})

export default ImageRenderer
