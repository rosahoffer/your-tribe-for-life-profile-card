import {
	type Blocks,
	StructuredTextContent,
	StructuredTextContentType,
} from "@prismicio/types-internal/lib/documents/widgets/nestable/StructuredTextContent"
import { pipe } from "fp-ts/lib/function"
import * as O from "fp-ts/lib/Option"

import type { RenderContext } from "../../../models"
import { ApiVersion } from "../../../models"
import type { StructuredTextDefO } from "../../../models/ApiModel"
import type { SimpleField } from "../../../models/fetch"
import type { Renderer } from "../../../models/Renderer"
import BlockRenderer from "./BlockRenderer"

function renderSummaryJson(text: StructuredTextContent, renderer: (text: StructuredTextContent) => unknown): unknown {
	const firstBlock = pipe<
		O.Option<Blocks.TextBlock>,
		O.Option<Blocks.TextBlock>,
		O.Option<Array<Blocks.TextBlock>>,
		Array<Blocks.TextBlock>
	>(
		O.fromNullable(
			text.value.find((block: Blocks.Block) => block.type.startsWith("heading")),
		) as O.Option<Blocks.TextBlock>,
		O.alt(
			() =>
				O.fromNullable(
					text.value.find((block: Blocks.Block) => block.type !== "embed" && block.type !== "image"),
				) as O.Option<Blocks.TextBlock>,
		),
		O.map((block: Blocks.TextBlock) => [block]),
		O.getOrElse<Array<Blocks.TextBlock>>(() => []),
	)

	return renderer({
		__TYPE__: StructuredTextContentType,
		value: firstBlock,
	})
}

const StructuredTextRenderer: (
	ctx: RenderContext,
) => Renderer<StructuredTextDefO, StructuredTextContent, SimpleField> = (ctx) => ({
	renderV1(content: StructuredTextContent, fetch: SimpleField | undefined): unknown {
		//TODO: factorize that
		const renderedBlocks = content.value.map((block) => BlockRenderer(ctx).renderBlock(block)(ApiVersion.v1))

		if (fetch !== undefined && fetch.legacy) {
			return renderSummaryJson(content, (text) =>
				text.value.map((block) => BlockRenderer(ctx).renderBlock(block)(ApiVersion.v1)),
			)
		}

		return {
			type: "StructuredText",
			value: renderedBlocks,
		}
	},

	renderV2(def: StructuredTextDefO, content: StructuredTextContent, fetch: SimpleField | undefined): unknown {
		if (fetch != undefined && fetch.legacy) {
			return renderSummaryJson(content, (text) => this.renderV2(def, text, undefined))
		}

		return content.value.map((block) => BlockRenderer(ctx).renderBlock(block)(ApiVersion.v2))
	},

	renderDefault(_def: StructuredTextDefO): unknown {
		return []
	},

	renderMocks(_def: StructuredTextDefO, content: StructuredTextContent): unknown {
		return content.value.map((block) => BlockRenderer(ctx).renderBlock(block)(ApiVersion.mocks))
	},
})

export default StructuredTextRenderer
