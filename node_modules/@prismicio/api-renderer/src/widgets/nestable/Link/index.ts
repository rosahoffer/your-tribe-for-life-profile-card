import { type LinkContent, Link } from "@prismicio/types-internal/lib/documents/widgets/nestable/Link"

import type { RenderContext, Renderer } from "../../../models"
import type { LinkDefO } from "../../../models/ApiModel"
import {
	AnyLinkDef,
	DocumentLinkDef,
	isAnyLinkDef,
	isDocumentLinkDef,
	isMediaLinkDef,
	isWebLinkDef,
	MediaLinkDef,
	WebLinkDef,
} from "../../../models/ApiModel"
import type { DocRelation } from "../../../models/fetch"
import DocumentLinkRenderer from "./DocumentLinkRenderer"
import ExternalLinkRenderer from "./ExternalLinkRenderer"
import FileLinkRenderer from "./FileLinkRenderer"
import ImageLinkRenderer from "./ImageLinkRenderer"

const LinkRenderer: (ctx: RenderContext) => Renderer<LinkDefO, LinkContent, DocRelation> = (ctx) => ({
	renderV1(link: LinkContent, fetch: DocRelation | undefined): unknown {
		const encoded = Link.encode(link.value)
		if (encoded.__TYPE__ === "ImageLink") {
			return ImageLinkRenderer(ctx).renderV1(encoded)
		} else if (encoded.__TYPE__ === "DocumentLink") {
			return DocumentLinkRenderer(ctx).renderV1(encoded, fetch)
		} else if (encoded.__TYPE__ === "FileLink") {
			return FileLinkRenderer(ctx).renderV1(encoded)
		} else if (encoded.__TYPE__ === "ExternalLink") {
			return ExternalLinkRenderer.renderV1(encoded)
		} else {
			throw new Error(`No rendered found for link ${JSON.stringify(link)}`) // normally unreachable
		}
	},

	renderV2(def: LinkDefO, content: LinkContent, fetch: DocRelation | undefined): unknown {
		const encoded = Link.encode(content.value)
		if (encoded.__TYPE__ === "ImageLink" && (isMediaLinkDef(def) || isAnyLinkDef(def))) {
			return ImageLinkRenderer(ctx).renderV2(def.config as MediaLinkDef | AnyLinkDef, encoded)
		} else if ((isDocumentLinkDef(def) || isAnyLinkDef(def)) && encoded.__TYPE__ === "DocumentLink") {
			return DocumentLinkRenderer(ctx).renderV2(def.config as DocumentLinkDef | AnyLinkDef, encoded, fetch)
		} else if ((isMediaLinkDef(def) || isAnyLinkDef(def)) && encoded.__TYPE__ === "FileLink") {
			return FileLinkRenderer(ctx).renderV2(def.config as MediaLinkDef | AnyLinkDef, encoded)
		} else if ((isWebLinkDef(def) || isAnyLinkDef(def)) && encoded.__TYPE__ === "ExternalLink") {
			return ExternalLinkRenderer.renderV2(def.config as WebLinkDef | AnyLinkDef, encoded)
		} else {
			return this.renderDefault(def)
		}
	},

	renderDefault(def: LinkDefO): unknown {
		switch (def.config.__TYPE__) {
			case "ConfigMediaLinkDef":
				return {
					link_type: "Media",
				}
			case "ConfigDocumentLinkDef":
				return {
					link_type: "Document",
				}
			case "ConfigWebLinkDef":
				return {
					link_type: "Web",
				}
			case "ConfigAnyLinkDef":
				return {
					link_type: "Any",
				}
		}
	},

	renderMocks(def: LinkDefO, content: LinkContent): unknown {
		const encoded = Link.encode(content.value)
		if (encoded.__TYPE__ === "ImageLink" && (isMediaLinkDef(def) || isAnyLinkDef(def))) {
			return ImageLinkRenderer(ctx).renderMocks(def.config as MediaLinkDef | AnyLinkDef, encoded)
		} else if ((isDocumentLinkDef(def) || isAnyLinkDef(def)) && encoded.__TYPE__ === "DocumentLink") {
			return DocumentLinkRenderer(ctx).renderMocks(def.config as DocumentLinkDef | AnyLinkDef, encoded)
		} else if ((isMediaLinkDef(def) || isAnyLinkDef(def)) && encoded.__TYPE__ === "FileLink") {
			return FileLinkRenderer(ctx).renderMocks(def.config as MediaLinkDef | AnyLinkDef, encoded)
		} else if ((isWebLinkDef(def) || isAnyLinkDef(def)) && encoded.__TYPE__ === "ExternalLink") {
			return ExternalLinkRenderer.renderMocks(def.config as WebLinkDef | AnyLinkDef, encoded)
		} else {
			return this.renderDefault(def)
		}
	},
})

export default LinkRenderer

export { DocumentLinkRenderer, ExternalLinkRenderer, FileLinkRenderer, ImageLinkRenderer }
