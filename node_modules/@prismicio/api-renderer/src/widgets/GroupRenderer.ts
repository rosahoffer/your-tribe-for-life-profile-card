import type { GroupContent } from "@prismicio/types-internal/lib/documents/widgets"

import type { GroupDefO, Renderer } from "../models"
import type { Group as GroupFetch } from "../models/fetch"
import type RenderContext from "../models/RenderContext"
import SimpleWidgetRenderer from "./SimpleWidgetRenderer"

const GroupRenderer: (ctx: RenderContext) => Renderer<GroupDefO, GroupContent, GroupFetch> = (ctx) => ({
	renderV1(content: GroupContent, fetch?: GroupFetch | undefined): unknown {
		return {
			type: "Group",
			value: content.value.map((items) => {
				return SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetV1(items.value, fetch?.fields)
			}),
		}
	},

	renderV2(groupDef: GroupDefO, content: GroupContent, fetch?: GroupFetch | undefined): unknown {
		return content.value.map((items) =>
			SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetV2(
				items.value,
				fetch?.fields,
				groupDef.fields,
				{
					withFetch: "filter",
				},
				{
					default: "default",
					withFetch: "default",
					withFetchField: "default",
				},
			),
		)
	},

	renderDefault(_: GroupDefO): unknown {
		return []
	},

	renderMocks(def: GroupDefO, content: GroupContent) {
		return content.value.map((items) =>
			SimpleWidgetRenderer(ctx).renderObjectOfSimpleWidgetMocks(items.value, def.fields),
		)
	},
})

export default GroupRenderer
