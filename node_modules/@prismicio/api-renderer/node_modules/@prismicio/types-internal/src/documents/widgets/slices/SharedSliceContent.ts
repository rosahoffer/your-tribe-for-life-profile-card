import { map } from "fp-ts/Either"
import * as O from "fp-ts/Option"
import * as t from "io-ts"
import { withFallback } from "io-ts-types"

import type { GroupItemContent } from "../GroupContent"
import { GroupContent, SimpleWidgetContent } from "../index"

export const SharedSliceContentType = "SharedSliceContent"
export type SharedSliceContent = {
	variation: string
	primary: { [key: string]: SimpleWidgetContent }
	items: GroupItemContent[]
	__TYPE__: typeof SharedSliceContentType
}

const codec = t.exact(
	t.type({
		variation: t.string,
		items: withFallback(t.array(t.unknown), []),
		primary: withFallback(t.UnknownRecord, {}),
	}),
)

export const SharedSliceContent = {
	fromJson: (
		prefixes: Array<string>,
		key: string,
		value: unknown,
		fieldTypes: Map<string, string>,
		fieldPositions: Map<string, number>,
	): O.Option<SharedSliceContent> => {
		type SharedSliceContentC = t.TypeOf<typeof codec>

		const r = map((v: SharedSliceContentC) => {
			const prefixedItemsKey = Array.of(prefixes, [
				key,
				"variations",
				v.variation,
				"items",
			])
				.flat()
				.join(".")
			const groupItemsContents = GroupContent.itemsContentsFromJson(
				prefixedItemsKey,
				v.items,
				fieldTypes,
				fieldPositions,
			)
			const sortedFields = Object.entries(v.primary).sort(([k1], [k2]) => {
				const p1 =
					fieldPositions.get(
						`${Array.of(prefixes, [key]).flat().join(".")}.${k1}`,
					) ?? 10000
				const p2 =
					fieldPositions.get(
						`${Array.of(prefixes, [key]).flat().join(".")}.${k2}`,
					) ?? 10000
				return p1 - p2
			})

			const primary = sortedFields.reduce((acc, [k, w]) => {
				const kp = Array.of(prefixes, [
					key,
					"variations",
					v.variation,
					"primary",
					k,
				])
					.flat()
					.join(".")
				const kind = fieldTypes.get(kp)
				if (kind) {
					const maybeWidgetContent = SimpleWidgetContent.from(kind, w)
					if (O.isSome(maybeWidgetContent)) {
						acc[k] = maybeWidgetContent.value
					}
				}
				return acc
			}, {} as Record<string, SimpleWidgetContent>)

			const result: SharedSliceContent = {
				variation: v.variation,
				primary,
				items: groupItemsContents,
				__TYPE__: "SharedSliceContent",
			}

			return result
		})(codec.decode(value))

		return O.fromEither(r)
	},
}
