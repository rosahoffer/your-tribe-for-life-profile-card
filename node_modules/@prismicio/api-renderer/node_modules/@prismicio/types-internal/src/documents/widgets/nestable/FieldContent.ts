import { pipe } from "fp-ts/function"
import * as O from "fp-ts/Option"
import * as t from "io-ts"

export type FieldType =
	| "Text"
	| "Date"
	| "Timestamp"
	| "Color"
	| "Number"
	| "Range"
	| "Select"
export const FieldContentType = "FieldContent"
type FieldContent = {
	value: string
	type: FieldType
	__TYPE__: typeof FieldContentType
}

//we do that instead of idiomatic .trim()
//because we need to have the exact same behaviour than scala/java .trim()
//in other world only trim space and not non-breaking space or tab
function trimScalaStyle(s: string): string {
	let startAt = 0
	/* eslint-disable  @typescript-eslint/no-non-null-assertion */
	while (startAt < s.length && s[startAt]! <= " ") {
		startAt++
	}
	let endAt = s.length
	/* eslint-disable  @typescript-eslint/no-non-null-assertion */
	while (startAt < endAt && s[endAt - 1]! <= " ") {
		endAt--
	}
	return s.substring(startAt, endAt)
}

const FieldContent = {
	types: ["Text", "Date", "Timestamp", "Color", "Number", "Range", "Select"],
	forType: (type: FieldType, value: unknown): O.Option<FieldContent> => {
		return pipe(
			O.fromEither(t.string.decode(value)),
			O.map((r) => {
				return {
					value: trimScalaStyle(r),
					type,
					__TYPE__: "FieldContent",
				}
			}),
		)
	},
}

export default FieldContent
