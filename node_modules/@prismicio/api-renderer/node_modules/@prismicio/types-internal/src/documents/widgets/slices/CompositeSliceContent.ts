import { isRight } from "fp-ts/Either"
import * as O from "fp-ts/Option"
import * as t from "io-ts"

import type { GroupItemContent } from "../GroupContent"
import { GroupContent, SimpleWidgetContent } from "../index"

export const CompositeSliceContentType = "CompositeSliceContent"
export type CompositeSliceContent = {
	repeat: GroupItemContent[]
	nonRepeat: { [key: string]: SimpleWidgetContent }
	__TYPE__: typeof CompositeSliceContentType
}

const codec = t.exact(
	t.partial({
		repeat: t.array(t.unknown),
		"non-repeat": t.UnknownRecord,
	}),
)

export const CompositeSliceContent = {
	fromJson: (
		prefixes: Array<string>,
		key: string,
		value: unknown,
		fieldTypes: Map<string, string>,
		fieldPositions: Map<string, number>,
	): O.Option<CompositeSliceContent> => {
		const prefixedRepeatKey = Array.of(prefixes, [key, "repeat"])
			.flat()
			.join(".")

		const decodedValue = codec.decode(value)
		if (isRight(decodedValue)) {
			const repeatObj = decodedValue.right.repeat
			const nonRepeatObj = decodedValue.right["non-repeat"] ?? {}
			const groupItemsContentsRepeat = GroupContent.itemsContentsFromJson(
				prefixedRepeatKey,
				repeatObj,
				fieldTypes,
				fieldPositions,
			)
			const sortedFields = Object.entries(nonRepeatObj).sort(([k1], [k2]) => {
				const p1 =
					fieldPositions.get(
						`${Array.of(prefixes, [key]).flat().join(".")}.${k1}`,
					) ?? 10000
				const p2 =
					fieldPositions.get(
						`${Array.of(prefixes, [key]).flat().join(".")}.${k2}`,
					) ?? 10000
				return p1 - p2
			})

			const nonRepeat = sortedFields.reduce((acc, [k, v]) => {
				const kp = Array.of(prefixes, [key, "non-repeat", k]).flat().join(".")
				const kind = fieldTypes.get(kp)
				if (kind) {
					const mWidgetContent = SimpleWidgetContent.from(kind, v)
					if (O.isSome(mWidgetContent)) {
						acc[k] = mWidgetContent.value
					}
				}
				return acc
			}, {} as Record<string, SimpleWidgetContent>)

			return O.some({
				repeat: groupItemsContentsRepeat,
				nonRepeat,
				__TYPE__: "CompositeSliceContent",
			})
		} else {
			return O.none
		}
	},
}
