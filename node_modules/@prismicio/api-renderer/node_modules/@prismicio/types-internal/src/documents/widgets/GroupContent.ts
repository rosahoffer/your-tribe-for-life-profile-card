import * as A from "fp-ts/Array"
import * as O from "fp-ts/Option"
import * as t from "io-ts"

import { SimpleWidgetContent } from "./SimpleWidgetContent"

export const GroupItemContentType = "GroupItemContent"
export interface GroupItemContent {
	__TYPE__: typeof GroupItemContentType
	value: Array<[string, SimpleWidgetContent]>
}

export const GroupContentType = "GroupContentType"
export interface GroupContent {
	__TYPE__: typeof GroupContentType
	value: GroupItemContent[]
}

export const GroupContent = Object.freeze({
	itemsContentsFromJson: (
		prefixedKey: string,
		jsItems: Array<unknown> | undefined,
		fieldTypes: Map<string, string>,
		fieldPositions: Map<string, number>,
	): Array<GroupItemContent> => {
		if (jsItems) {
			return jsItems.map((jsItem) => {
				if (typeof jsItem === "object" && jsItem !== null) {
					const sorted = Object.entries(jsItem).sort(([k1], [k2]) => {
						const p1 = fieldPositions.get(`${prefixedKey}.${k1}`) ?? 10000
						const p2 = fieldPositions.get(`${prefixedKey}.${k2}`) ?? 10000
						return p1 - p2
					})

					const w: O.Option<[string, SimpleWidgetContent]>[] = sorted.map(
						([k, v]) => {
							const kind = fieldTypes.get(`${prefixedKey}.${k}`)
							if (kind) {
								return O.map<
									SimpleWidgetContent,
									[string, SimpleWidgetContent]
								>((content) => {
									return [k, content]
								})(SimpleWidgetContent.from(kind, v))
							} else {
								return O.none
							}
						},
					)

					return {
						__TYPE__: "GroupItemContent",
						value: A.compact(w),
					}
				} else {
					return {
						__TYPE__: "GroupItemContent",
						value: [],
					}
				}
			})
		} else {
			return []
		}
	},

	fromJson: (
		prefixes: Array<string>,
		key: string,
		value: unknown,
		fieldTypes: Map<string, string>,
		fieldPositions: Map<string, number>,
	): O.Option<GroupContent> => {
		const prefixedKey = Array.of(prefixes, [key]).flat().join(".")

		const maybeJsItems: O.Option<Array<unknown>> = O.fromEither(
			t.array(t.unknown).decode(value),
		)
		return O.map((items: Array<unknown>) => {
			return {
				value: GroupContent.itemsContentsFromJson(
					prefixedKey,
					items,
					fieldTypes,
					fieldPositions,
				),
				__TYPE__: GroupContentType,
			} as const
		})(maybeJsItems)
	},
})
