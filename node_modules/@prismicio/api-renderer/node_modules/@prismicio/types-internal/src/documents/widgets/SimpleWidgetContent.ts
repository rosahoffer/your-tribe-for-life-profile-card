import { pipe } from "fp-ts/function"
import * as O from "fp-ts/Option"
import * as t from "io-ts"

import type { EmptyContent } from "./EmptyContent"
import BooleanContent from "./nestable/BooleanContent"
import { EmbedContent, EmbedContentO } from "./nestable/EmbedContent"
import FieldContent, { FieldType } from "./nestable/FieldContent"
import { GeoPointContent, GeoPointContentO } from "./nestable/GeoPointContent"
import { ImageContent, ImageContentO } from "./nestable/ImageContent"
import IntegrationFieldsContent from "./nestable/IntegrationFieldsContent"
import { LinkContent } from "./nestable/Link"
import type { SeparatorContent } from "./nestable/SeparatorContent"
import { StructuredTextContent } from "./nestable/StructuredTextContent"
import { UIDContent } from "./UIDContent"

//TODO: rework that using import such as EmptyContentType
export const SimpleWidgetContentType = [
	"EmptyContent",
	"ImageContent",
	"GeoPointContent",
	"EmbedContent",
	"BooleanContent",
	"IntegrationFieldsContent",
	"StructuredTextContent",
	"LinkContent",
	"UIDContent",
	"SeparatorContent",
	"FieldContent",
]

export type NonEmptySimpleWidgetContent =
	| IntegrationFieldsContent
	| StructuredTextContent
	| ImageContentO
	| GeoPointContentO
	| EmbedContentO
	| LinkContent
	| UIDContent
	| SeparatorContent
	| FieldContent
	| BooleanContent

export type SimpleWidgetContent = NonEmptySimpleWidgetContent | EmptyContent

export function is(value: unknown): value is SimpleWidgetContent {
	const asSwc = value as SimpleWidgetContent
	return SimpleWidgetContentType.includes(asSwc.__TYPE__)
}
const valueNullCodec = t.type({
	value: t.null,
})
export const SimpleWidgetContent = {
	from: (type: string, content: unknown): O.Option<SimpleWidgetContent> => {
		if (content === null || valueNullCodec.is(content)) {
			const result: EmptyContent = { type: type, __TYPE__: "EmptyContent" }
			return O.some(result)
		}

		switch (type) {
			case "StructuredText":
				return O.fromEither(StructuredTextContent.decode(content))
			case "IntegrationFields":
				return O.fromEither(IntegrationFieldsContent.decode(content))
			case "Image":
				return pipe(
					O.fromEither(ImageContent.decode(content)),
					O.map((imageContent) => ImageContent.encode(imageContent)),
				)
			case "GeoPoint":
				return pipe(
					O.fromEither(GeoPointContent.decode(content)),
					O.map((geopointContent) => GeoPointContent.encode(geopointContent)),
				)
			case "Embed":
				return O.fromEither(EmbedContent.decode(content))
			case "Link":
				return O.fromEither(LinkContent.decode(content))
			case "UID":
				return O.fromEither(UIDContent.decode(content))
			case "Separator":
				return O.some({ __TYPE__: "SeparatorContent" })
			case "Boolean":
				return O.fromEither(BooleanContent.decode(content))
			default:
				if (FieldContent.types.includes(type)) {
					return FieldContent.forType(type as FieldType, content)
				} else {
					return O.none
				}
		}
	},
	//TODO: rework that
	is: (value: unknown): value is SimpleWidgetContent =>
		SimpleWidgetContentType.includes((value as SimpleWidgetContent).__TYPE__),
}
