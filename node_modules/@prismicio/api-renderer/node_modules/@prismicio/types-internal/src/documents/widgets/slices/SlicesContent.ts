import * as A from "fp-ts/Array"
import { pipe } from "fp-ts/function"
import * as O from "fp-ts/Option"
import * as t from "io-ts"

import { nullable } from "../../../validators/function"
import { SliceWidgetContent } from "./SliceWidgetContent"

export type SlicesContentItem = {
	key: string
	name: string
	maybeLabel: string | undefined
	widget: SliceWidgetContent
}

export const SlicesContentType = "SliceContentType"
export type SlicesContent = {
	__TYPE__: typeof SlicesContentType
	value: SlicesContentItem[]
}
const codec = t.exact(
	t.intersection([
		t.type({
			key: t.string,
			value: t.unknown,
		}),
		t.partial({
			label: nullable(t.string),
		}),
	]),
)
export const SlicesContent = {
	itemsCodec: (
		value: unknown,
		codecWidget: (n: string, v: unknown) => O.Option<SliceWidgetContent>,
	): O.Option<SlicesContentItem> => {
		return pipe(
			codec.decode(value),
			O.fromEither,
			O.chain((r) => {
				const stopIdx = r.key.indexOf("$")
				const name = r.key.substring(0, stopIdx > 0 ? stopIdx : undefined)
				const maybeWidget = codecWidget(name, r.value)
				return O.map((widget) => {
					return {
						key: r.key,
						name,
						maybeLabel: r.label ?? undefined,
						widget: widget,
					} as SlicesContentItem
				})(maybeWidget)
			}),
		)
	},
	fromJson: (
		key: string,
		value: unknown,
		fieldTypes: Map<string, string>,
		fieldPositions: Map<string, number>,
	): O.Option<SlicesContent> => {
		if (fieldTypes.get(key) === "Slices") {
			const jsItems = O.getOrElse(() => new Array<unknown>())(
				O.fromEither(t.array(t.unknown).decode(value)),
			)

			const widgetCodec = (
				name: string,
				wValue: unknown,
			): O.Option<SliceWidgetContent> =>
				SliceWidgetContent.fromJson(
					[key],
					name,
					wValue,
					fieldTypes,
					fieldPositions,
				)

			return O.some({
				value: A.compact(
					jsItems.map((jsItem: unknown) =>
						SlicesContent.itemsCodec(jsItem, widgetCodec),
					),
				),
				__TYPE__: SlicesContentType,
			} as const)
		} else {
			console.error("fieldTypes.get(key) !== 'Slices'")
			return O.none
		}
	},
}
