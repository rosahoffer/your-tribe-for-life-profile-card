import * as t from "io-ts"
import { NumberFromString } from "io-ts-types/lib/NumberFromString"

import { StringOrNull } from "../../../validators"
import { WidgetTypes } from "../WidgetTypes"

const RangeConfig = t.exact(
	t.partial({
		label: StringOrNull,
		placeholder: t.string,
		min: t.union([t.number, NumberFromString]),
		max: t.union([t.number, NumberFromString]),
		step: t.union([t.number, NumberFromString]),
	}),
)
type RangeConfig = t.TypeOf<typeof RangeConfig>

const Range = t.exact(
	t.intersection([
		t.type({
			type: t.literal(WidgetTypes.Range),
		}),
		t.partial({
			fieldset: StringOrNull,
			config: RangeConfig,
		}),
	]),
)
type Range = t.TypeOf<typeof Range>

export default Range
