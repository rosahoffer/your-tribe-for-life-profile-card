import * as t from "io-ts"

import Group from "./Group"
import NestableWidget from "./nestable/NestableWidget"
import type { SharedSlice } from "./slices/SharedSlice"
import { DynamicSlices, Slices, StaticSlices } from "./slices/Slices"
import UID from "./UID"
import { WidgetTypes } from "./WidgetTypes"

export function widgetReader<T extends StaticSlices | DynamicSlices>(
	codec: t.Type<T, unknown>,
) {
	return t.union([UID, NestableWidget, Group, codec])
}

export const StaticWidget = widgetReader(StaticSlices)
export type StaticWidget = t.TypeOf<typeof StaticWidget>

export const DynamicWidget = widgetReader(DynamicSlices)
export type DynamicWidget = t.TypeOf<typeof DynamicWidget>

export const Widgets = {
	toStatic(
		widget: DynamicWidget,
		sharedSlices: Map<string, SharedSlice>,
	): StaticWidget {
		switch (widget.type) {
			case WidgetTypes.LegacySlices:
			case WidgetTypes.Slices:
				return Slices.toStatic(widget, sharedSlices)
			default:
				return widget as StaticWidget
		}
	},
}
