"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleWidgetContent = exports.is = exports.SimpleWidgetContentType = void 0;
const tslib_1 = require("tslib");
const function_1 = require("fp-ts/function");
const O = (0, tslib_1.__importStar)(require("fp-ts/Option"));
const t = (0, tslib_1.__importStar)(require("io-ts"));
const BooleanContent_1 = (0, tslib_1.__importDefault)(require("./nestable/BooleanContent"));
const EmbedContent_1 = require("./nestable/EmbedContent");
const FieldContent_1 = (0, tslib_1.__importDefault)(require("./nestable/FieldContent"));
const GeoPointContent_1 = require("./nestable/GeoPointContent");
const ImageContent_1 = require("./nestable/ImageContent");
const IntegrationFieldsContent_1 = (0, tslib_1.__importDefault)(require("./nestable/IntegrationFieldsContent"));
const Link_1 = require("./nestable/Link");
const StructuredTextContent_1 = require("./nestable/StructuredTextContent");
const UIDContent_1 = require("./UIDContent");
//TODO: rework that using import such as EmptyContentType
exports.SimpleWidgetContentType = [
    "EmptyContent",
    "ImageContent",
    "GeoPointContent",
    "EmbedContent",
    "BooleanContent",
    "IntegrationFieldsContent",
    "StructuredTextContent",
    "LinkContent",
    "UIDContent",
    "SeparatorContent",
    "FieldContent",
];
function is(value) {
    const asSwc = value;
    return exports.SimpleWidgetContentType.includes(asSwc.__TYPE__);
}
exports.is = is;
const valueNullCodec = t.type({
    value: t.null,
});
exports.SimpleWidgetContent = {
    from: (type, content) => {
        if (content === null || valueNullCodec.is(content)) {
            const result = { type: type, __TYPE__: "EmptyContent" };
            return O.some(result);
        }
        switch (type) {
            case "StructuredText":
                return O.fromEither(StructuredTextContent_1.StructuredTextContent.decode(content));
            case "IntegrationFields":
                return O.fromEither(IntegrationFieldsContent_1.default.decode(content));
            case "Image":
                return (0, function_1.pipe)(O.fromEither(ImageContent_1.ImageContent.decode(content)), O.map((imageContent) => ImageContent_1.ImageContent.encode(imageContent)));
            case "GeoPoint":
                return (0, function_1.pipe)(O.fromEither(GeoPointContent_1.GeoPointContent.decode(content)), O.map((geopointContent) => GeoPointContent_1.GeoPointContent.encode(geopointContent)));
            case "Embed":
                return O.fromEither(EmbedContent_1.EmbedContent.decode(content));
            case "Link":
                return O.fromEither(Link_1.LinkContent.decode(content));
            case "UID":
                return O.fromEither(UIDContent_1.UIDContent.decode(content));
            case "Separator":
                return O.some({ __TYPE__: "SeparatorContent" });
            case "Boolean":
                return O.fromEither(BooleanContent_1.default.decode(content));
            default:
                if (FieldContent_1.default.types.includes(type)) {
                    return FieldContent_1.default.forType(type, content);
                }
                else {
                    return O.none;
                }
        }
    },
    //TODO: rework that
    is: (value) => exports.SimpleWidgetContentType.includes(value.__TYPE__),
};
