"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupContent = exports.GroupContentType = exports.GroupItemContentType = void 0;
const tslib_1 = require("tslib");
const A = (0, tslib_1.__importStar)(require("fp-ts/Array"));
const O = (0, tslib_1.__importStar)(require("fp-ts/Option"));
const t = (0, tslib_1.__importStar)(require("io-ts"));
const SimpleWidgetContent_1 = require("./SimpleWidgetContent");
exports.GroupItemContentType = "GroupItemContent";
exports.GroupContentType = "GroupContentType";
exports.GroupContent = Object.freeze({
    itemsContentsFromJson: (prefixedKey, jsItems, fieldTypes, fieldPositions) => {
        if (jsItems) {
            return jsItems.map((jsItem) => {
                if (typeof jsItem === "object" && jsItem !== null) {
                    const sorted = Object.entries(jsItem).sort(([k1], [k2]) => {
                        var _a, _b;
                        const p1 = (_a = fieldPositions.get(`${prefixedKey}.${k1}`)) !== null && _a !== void 0 ? _a : 10000;
                        const p2 = (_b = fieldPositions.get(`${prefixedKey}.${k2}`)) !== null && _b !== void 0 ? _b : 10000;
                        return p1 - p2;
                    });
                    const w = sorted.map(([k, v]) => {
                        const kind = fieldTypes.get(`${prefixedKey}.${k}`);
                        if (kind) {
                            return O.map((content) => {
                                return [k, content];
                            })(SimpleWidgetContent_1.SimpleWidgetContent.from(kind, v));
                        }
                        else {
                            return O.none;
                        }
                    });
                    return {
                        __TYPE__: "GroupItemContent",
                        value: A.compact(w),
                    };
                }
                else {
                    return {
                        __TYPE__: "GroupItemContent",
                        value: [],
                    };
                }
            });
        }
        else {
            return [];
        }
    },
    fromJson: (prefixes, key, value, fieldTypes, fieldPositions) => {
        const prefixedKey = Array.of(prefixes, [key]).flat().join(".");
        const maybeJsItems = O.fromEither(t.array(t.unknown).decode(value));
        return O.map((items) => {
            return {
                value: exports.GroupContent.itemsContentsFromJson(prefixedKey, items, fieldTypes, fieldPositions),
                __TYPE__: exports.GroupContentType,
            };
        })(maybeJsItems);
    },
});
