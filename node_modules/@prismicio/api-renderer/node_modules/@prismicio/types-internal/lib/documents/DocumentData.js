"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Either_1 = require("fp-ts/lib/Either");
const O = (0, tslib_1.__importStar)(require("fp-ts/lib/Option"));
const t = (0, tslib_1.__importStar)(require("io-ts"));
const widgets_1 = require("./widgets");
function computeWidget(key, widgets, widgetTypes, widgetPositions) {
    const widget = widgets.get(key);
    if (widget === undefined) {
        return O.none;
    }
    return widgets_1.Widget.fromJson(key, widget, widgetTypes, widgetPositions);
}
const DocumentData = {
    getWidget(key, widgets, widgetTypes, widgetPositions, parsed) {
        const widget = parsed.get(key);
        if (widget === undefined) {
            return computeWidget(key, widgets, widgetTypes, widgetPositions);
        }
        return widget;
    },
    fromJson(widgets, widgetTypes, widgetPositions) {
        return Array.from(widgets.keys()).reduce((acc, widgetKey) => {
            const parsedWidget = this.getWidget(widgetKey, widgets, widgetTypes, widgetPositions, acc);
            return new Map([...Array.from(acc.entries()), [widgetKey, parsedWidget]]);
        }, new Map());
    },
    partitionData(data) {
        const fields = Object.entries(data);
        const { types, positions, widgets } = fields.reduce((acc, [k, v]) => {
            if (k.endsWith("_TYPE")) {
                const decodedValue = t.string.decode(v);
                if ((0, Either_1.isRight)(decodedValue)) {
                    return {
                        ...acc,
                        types: acc.types.set(k.substring(0, k.length - 5), decodedValue.right),
                    };
                }
            }
            if (k.endsWith("_POSITION") && typeof v === "number") {
                return {
                    ...acc,
                    positions: acc.positions.set(k.substring(0, k.length - 9), v),
                };
            }
            if (!k.endsWith("_POSITION") && !k.endsWith("_TYPE")) {
                return {
                    ...acc,
                    widgets: acc.widgets.set(k, v),
                };
            }
            return acc;
        }, {
            types: new Map(),
            positions: new Map(),
            widgets: new Map(),
        });
        const slugs = data["slugs_INTERNAL"] || [];
        const uid = data["uid"];
        return {
            widgets,
            types,
            positions,
            uid,
            slugs,
        };
    },
};
exports.default = DocumentData;
