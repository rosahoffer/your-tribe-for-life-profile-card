"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedSliceContent = exports.SharedSliceContentType = void 0;
const tslib_1 = require("tslib");
const Either_1 = require("fp-ts/Either");
const O = (0, tslib_1.__importStar)(require("fp-ts/Option"));
const t = (0, tslib_1.__importStar)(require("io-ts"));
const io_ts_types_1 = require("io-ts-types");
const index_1 = require("../index");
exports.SharedSliceContentType = "SharedSliceContent";
const codec = t.exact(t.type({
    variation: t.string,
    items: (0, io_ts_types_1.withFallback)(t.array(t.unknown), []),
    primary: (0, io_ts_types_1.withFallback)(t.UnknownRecord, {}),
}));
exports.SharedSliceContent = {
    fromJson: (prefixes, key, value, fieldTypes, fieldPositions) => {
        const r = (0, Either_1.map)((v) => {
            const prefixedItemsKey = Array.of(prefixes, [
                key,
                "variations",
                v.variation,
                "items",
            ])
                .flat()
                .join(".");
            const groupItemsContents = index_1.GroupContent.itemsContentsFromJson(prefixedItemsKey, v.items, fieldTypes, fieldPositions);
            const sortedFields = Object.entries(v.primary).sort(([k1], [k2]) => {
                var _a, _b;
                const p1 = (_a = fieldPositions.get(`${Array.of(prefixes, [key]).flat().join(".")}.${k1}`)) !== null && _a !== void 0 ? _a : 10000;
                const p2 = (_b = fieldPositions.get(`${Array.of(prefixes, [key]).flat().join(".")}.${k2}`)) !== null && _b !== void 0 ? _b : 10000;
                return p1 - p2;
            });
            const primary = sortedFields.reduce((acc, [k, w]) => {
                const kp = Array.of(prefixes, [
                    key,
                    "variations",
                    v.variation,
                    "primary",
                    k,
                ])
                    .flat()
                    .join(".");
                const kind = fieldTypes.get(kp);
                if (kind) {
                    const maybeWidgetContent = index_1.SimpleWidgetContent.from(kind, w);
                    if (O.isSome(maybeWidgetContent)) {
                        acc[k] = maybeWidgetContent.value;
                    }
                }
                return acc;
            }, {});
            const result = {
                variation: v.variation,
                primary,
                items: groupItemsContents,
                __TYPE__: "SharedSliceContent",
            };
            return result;
        })(codec.decode(value));
        return O.fromEither(r);
    },
};
