"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Widget = exports.WidgetKey = exports.WidgetTypes = exports.StaticWidgetContent = exports.Slices = exports.Nestable = void 0;
const tslib_1 = require("tslib");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const function_1 = require("../../validators/function");
const EmptyContent_1 = require("./EmptyContent");
const GroupContent_1 = require("./GroupContent");
const nestable_1 = require("./nestable");
const slices_1 = require("./slices");
const StaticWidgetContent_1 = (0, tslib_1.__importDefault)(require("./StaticWidgetContent"));
const UIDContent_1 = require("./UIDContent");
(0, tslib_1.__exportStar)(require("./EmptyContent"), exports);
(0, tslib_1.__exportStar)(require("./GroupContent"), exports);
exports.Nestable = (0, tslib_1.__importStar)(require("./nestable"));
(0, tslib_1.__exportStar)(require("./SimpleWidgetContent"), exports);
exports.Slices = (0, tslib_1.__importStar)(require("./slices"));
var StaticWidgetContent_2 = require("./StaticWidgetContent");
Object.defineProperty(exports, "StaticWidgetContent", { enumerable: true, get: function () { return (0, tslib_1.__importDefault)(StaticWidgetContent_2).default; } });
(0, tslib_1.__exportStar)(require("./UIDContent"), exports);
exports.WidgetTypes = {
    ...nestable_1.NestableTypes,
    Empty: EmptyContent_1.EmptyContentType,
    UID: UIDContent_1.UIDContentType,
    Group: GroupContent_1.GroupContentType,
    slices: slices_1.SlicesContentType,
};
const widgetKeyRegex = new RegExp("^[^<>]+$");
exports.WidgetKey = (0, function_1.refineType)(t.string, "WidgetKey", (s) => s.length === 0 || widgetKeyRegex.test(s));
exports.Widget = {
    fromJson(widgetKey, widgetValue, widgetTypes, widgetPositions) {
        const fieldType = widgetTypes.get(widgetKey);
        if (fieldType === "Slices") {
            return slices_1.SlicesContent.fromJson(widgetKey, widgetValue, widgetTypes, widgetPositions);
        }
        else {
            return StaticWidgetContent_1.default.fromJson([], widgetKey, widgetValue, widgetTypes, widgetPositions);
        }
    },
};
