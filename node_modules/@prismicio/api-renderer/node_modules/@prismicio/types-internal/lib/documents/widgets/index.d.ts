import * as t from "io-ts";
import { SlicesContent } from "./slices";
import StaticWidgetContent from "./StaticWidgetContent";
export * from "./EmptyContent";
export * from "./GroupContent";
export * as Nestable from "./nestable";
export * from "./SimpleWidgetContent";
export * as Slices from "./slices";
export { type NonEmptyStaticWidgetContent, default as StaticWidgetContent, } from "./StaticWidgetContent";
export * from "./UIDContent";
export declare const WidgetTypes: {
    readonly Empty: "EmptyContent";
    readonly UID: "UIDContent";
    readonly Group: "GroupContentType";
    readonly slices: "SliceContentType";
    readonly Links: {
        readonly DocumentLink: "DocumentLink";
        readonly FileLink: "FileLink";
        readonly ExternalLink: "ExternalLink";
        readonly ImageLink: "ImageLink";
        readonly LinkContent: "LinkContent";
    };
    readonly StructuredText: "StructuredTextContent";
    readonly Boolean: "BooleanContent";
    readonly Embed: "EmbedContent";
    readonly Field: "FieldContent";
    readonly GeoPoint: "GeoPointContent";
    readonly Image: "ImageContent";
    readonly IntegrationFields: "IntegrationFieldsContent";
    readonly Separator: "SeparatorContent";
};
export declare type WidgetTypes = typeof WidgetTypes[keyof typeof WidgetTypes];
export declare const WidgetKey: t.Type<string, string, unknown>;
export declare type WidgetKey = t.TypeOf<typeof WidgetKey>;
export declare type WidgetContent = SlicesContent | StaticWidgetContent;
export declare const Widget: {
    fromJson(widgetKey: WidgetKey, widgetValue: unknown, widgetTypes: Map<WidgetKey, string>, widgetPositions: Map<WidgetKey, number>): import("fp-ts/lib/Option").None | import("fp-ts/lib/Option").Some<StaticWidgetContent> | import("fp-ts/lib/Option").Some<SlicesContent>;
};
