import * as t from "io-ts";
export declare const ImageLinkContent: t.IntersectionC<[t.ExactC<t.TypeC<{
    __TYPE__: t.LiteralC<"ImageLink">;
}>>, t.Type<{
    id: string;
    url: string;
    height: string;
    width: string;
    size: string;
    name: string;
    kind: string;
} & {
    date?: string | null | undefined;
}, {
    id: string;
    url: string;
    height: string;
    width: string;
    size: string;
    name: string;
    kind: string;
} & {
    date?: string | null | undefined;
} & {
    __TYPE__: "ImageLink";
}, unknown>]>;
export declare type ImageLinkContent = t.TypeOf<typeof ImageLinkContent>;
export declare const ImageLinkType = "ImageLink";
export declare const FileLinkContent: t.IntersectionC<[t.Type<{
    id: string;
    url: string;
    name: string;
    kind: string;
} & {
    date?: string | null | undefined;
    size?: string;
}, {
    readonly size: string;
    readonly __TYPE__: "FileLink";
    readonly id: string;
    readonly url: string;
    readonly name: string;
    readonly kind: string;
    readonly date?: string | null | undefined;
}, unknown>, t.ExactC<t.TypeC<{
    __TYPE__: t.LiteralC<"FileLink">;
    size: t.StringC;
}>>]>;
export declare type FileLinkContent = t.TypeOf<typeof FileLinkContent>;
export declare const FileLinkType = "FileLink";
export declare const DocumentLinkContent: t.IntersectionC<[t.ExactC<t.TypeC<{
    __TYPE__: t.LiteralC<"DocumentLink">;
}>>, t.Type<{
    id: string;
}, {
    id: string;
} & {
    __TYPE__: "DocumentLink";
}, unknown>]>;
export declare type DocumentLinkContent = t.TypeOf<typeof DocumentLinkContent>;
export declare const DocumentLinkType = "DocumentLink";
export declare const ExternalLinkContent: t.IntersectionC<[t.ExactC<t.TypeC<{
    __TYPE__: t.LiteralC<"ExternalLink">;
}>>, t.Type<{
    url: string;
} & {
    kind?: "web";
    target?: string | null | undefined;
    preview?: {
        title?: string;
    } | null | undefined;
}, {
    url: string;
} & {
    kind?: "web";
    target?: string | null | undefined;
    preview?: {
        title?: string;
    } | null | undefined;
} & {
    __TYPE__: "ExternalLink";
}, unknown>]>;
export declare type ExternalLinkContent = t.TypeOf<typeof ExternalLinkContent>;
export declare const ExternalLinkType = "ExternalLink";
export declare const LinkContent: t.ExactC<t.TypeC<{
    __TYPE__: t.LiteralC<"LinkContent">;
    value: t.UnionC<[t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"ImageLink">;
    }>>, t.Type<{
        id: string;
        url: string;
        height: string;
        width: string;
        size: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
    }, {
        id: string;
        url: string;
        height: string;
        width: string;
        size: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
    } & {
        __TYPE__: "ImageLink";
    }, unknown>]>, t.IntersectionC<[t.Type<{
        id: string;
        url: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
        size?: string;
    }, {
        readonly size: string;
        readonly __TYPE__: "FileLink";
        readonly id: string;
        readonly url: string;
        readonly name: string;
        readonly kind: string;
        readonly date?: string | null | undefined;
    }, unknown>, t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"FileLink">;
        size: t.StringC;
    }>>]>, t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"DocumentLink">;
    }>>, t.Type<{
        id: string;
    }, {
        id: string;
    } & {
        __TYPE__: "DocumentLink";
    }, unknown>]>, t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"ExternalLink">;
    }>>, t.Type<{
        url: string;
    } & {
        kind?: "web";
        target?: string | null | undefined;
        preview?: {
            title?: string;
        } | null | undefined;
    }, {
        url: string;
    } & {
        kind?: "web";
        target?: string | null | undefined;
        preview?: {
            title?: string;
        } | null | undefined;
    } & {
        __TYPE__: "ExternalLink";
    }, unknown>]>]>;
}>>;
export declare type LinkContent = t.TypeOf<typeof LinkContent>;
export declare const LinkContentType = "LinkContent";
export declare const LinksTypes: {
    readonly DocumentLink: "DocumentLink";
    readonly FileLink: "FileLink";
    readonly ExternalLink: "ExternalLink";
    readonly ImageLink: "ImageLink";
    readonly LinkContent: "LinkContent";
};
