import * as t from 'io-ts';
export declare const ImageContent: t.IntersectionC<[t.Type<{
    origin: {
        id: string;
        url: string;
        width: number;
        height: number;
    };
    width: number;
    height: number;
    edit: {
        zoom: number;
        crop: {
            x: number;
            y: number;
        };
        background: string;
    };
} & {
    url?: string;
    credits?: string | null;
    alt?: string | null;
    provider?: string | null | undefined;
} & {
    thumbnails?: {
        [x: string]: {
            origin: {
                id: string;
                url: string;
                width: number;
                height: number;
            };
            width: number;
            height: number;
            edit: {
                zoom: number;
                crop: {
                    x: number;
                    y: number;
                };
                background: string;
            };
        } & {
            url?: string;
            credits?: string | null;
            alt?: string | null;
            provider?: string | null | undefined;
        };
    };
}, {
    origin: {
        id: string;
        url: string;
        width: number;
        height: number;
    };
    width: number;
    height: number;
    edit: {
        zoom: number;
        crop: {
            x: number;
            y: number;
        };
        background: string;
    };
} & {
    url?: string;
    credits?: string | null;
    alt?: string | null;
    provider?: string | null | undefined;
} & {
    thumbnails?: {
        [x: string]: {
            origin: {
                id: string;
                url: string;
                width: number;
                height: number;
            };
            width: number;
            height: number;
            edit: {
                zoom: number;
                crop: {
                    x: number;
                    y: number;
                };
                background: string;
            };
        } & {
            url?: string;
            credits?: string | null;
            alt?: string | null;
            provider?: string | null | undefined;
        };
    };
} & {
    __TYPE__: "ImageContent";
}, unknown>, t.ExactC<t.TypeC<{
    __TYPE__: t.LiteralC<"ImageContent">;
}>>]>;
export declare type ImageContent = t.TypeOf<typeof ImageContent>;
