import * as t from "io-ts";
declare const Range: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Range">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types/lib/NumberFromString").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types/lib/NumberFromString").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types/lib/NumberFromString").NumberFromStringC]>;
    }>>;
}>]>>;
declare type Range = t.TypeOf<typeof Range>;
export default Range;
