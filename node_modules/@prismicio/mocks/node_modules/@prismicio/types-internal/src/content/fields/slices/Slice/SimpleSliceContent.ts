import * as t from "io-ts"

import type { LegacyContentCtx } from "../../../LegacyContentCtx"
import { GroupContent, GroupLegacy, isGroupContent } from "../../GroupContent"
import {
	isNestableContent,
	NestableContent,
	NestableLegacy,
} from "../../nestable"

export const SimpleSliceContent = t.union([NestableContent, GroupContent])
export type SimpleSliceContent = t.TypeOf<typeof SimpleSliceContent>

export const isSimpleSliceContent = (u: unknown): u is SimpleSliceContent =>
	isNestableContent(u) || isGroupContent(u)

export const SimpleSliceLegacy = (ctx: LegacyContentCtx) => {
	return {
		decode: (NestableLegacy(ctx) || GroupLegacy(ctx)).decode.bind(null),

		encode: (value: SimpleSliceContent) => {
			switch (value.__TYPE__) {
				case "GroupContentType":
					return GroupLegacy(ctx).encode(value)
				default:
					return NestableLegacy(ctx).encode(value)
			}
		},
	}
}
