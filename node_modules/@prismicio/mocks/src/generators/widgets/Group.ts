import {
	GroupContent,
	GroupContentType,
	GroupItemContentType,
} from "@prismicio/types-internal/lib/content/fields"
import type { NestableContent } from "@prismicio/types-internal/lib/content/fields/nestable/NestableContent"
import type {
	Group,
	NestableWidget,
} from "@prismicio/types-internal/lib/customtypes"

import type { NestableWidgetMockConfig } from ".."
import type { WidgetMock } from "../Mock"
import type { MockConfig } from "../MockConfig"
import { NestableWidgetMock } from "."

export interface GroupMockConfig
	extends MockConfig<Group["type"], Array<Array<[string, NestableContent]>>> {
	nbBlocks?: number
	fields?: Partial<Record<string, NestableWidgetMockConfig>>
}

function random(
	def: Group,
	nbBlocks: number | undefined = 1,
	fields: Partial<Record<string, NestableWidgetMockConfig>> = {},
): Array<Array<[string, NestableContent]>> {
	if (!def.config || !def.config.fields) {
		return []
	}

	return Array(nbBlocks)
		.fill(null)
		.map(() => {
			const defs: Array<[string, NestableWidget]> = Object.entries(
				def?.config?.fields || {},
			)

			const block: Array<[string, NestableContent]> = defs.map(
				([key, field]: [string, NestableWidget]) => {
					const mockConfig = fields[key]
					return [key, NestableWidgetMock.generate(field, mockConfig)]
				},
			)
			return block
		})
}

export const GroupMock: WidgetMock<Group, GroupContent, GroupMockConfig> = {
	generate(def: Group, config?: GroupMockConfig): GroupContent {
		const value = config?.value || random(def, config?.nbBlocks, config?.fields)

		return {
			__TYPE__: GroupContentType,
			value: value.map((item) => ({
				__TYPE__: GroupItemContentType,
				value: item,
			})),
		} as GroupContent
	},
}
