import { DocumentRenderer, SharedSliceRenderer } from "@prismicio/api-renderer"
import { fromCustomType } from "@prismicio/api-renderer/lib/models"
import {
	fromSharedSlice,
	SharedSliceDef,
} from "@prismicio/api-renderer/lib/models/ApiModel/slices/SharedSlice"
import type { WidgetKey } from "@prismicio/types-internal/lib/common"
import type { SharedSliceContent } from "@prismicio/types-internal/lib/content"
import type { WidgetContent } from "@prismicio/types-internal/lib/content"
import type { CustomType } from "@prismicio/types-internal/lib/customtypes"
import type { SharedSlice } from "@prismicio/types-internal/lib/customtypes"
import { v4 as uuid } from "uuid"

import mockCtx from "./MockContext"

export function renderDocumentMock(
	customType: CustomType,
	sharedSlices: Partial<Record<string, SharedSlice>>,
	mocks: Partial<Record<WidgetKey, WidgetContent>>,
) {
	const apiModel = fromCustomType(customType, sharedSlices)
	const filteredMocks = Object.entries(mocks).filter(Boolean) as [
		string,
		WidgetContent,
	][]
	return DocumentRenderer(mockCtx).renderMocks(apiModel, filteredMocks)
}

export function renderSliceMock(
	sliceModel: SharedSlice,
	mock: SharedSliceContent,
): unknown {
	const apiModel = SharedSliceDef.encode(
		fromSharedSlice(sliceModel.id, sliceModel),
	)
	return {
		...(SharedSliceRenderer(mockCtx).renderMocks(apiModel, mock) as object),
		id: `${sliceModel.id}$${uuid()}`,
		slice_type: sliceModel.id,
	}
}
