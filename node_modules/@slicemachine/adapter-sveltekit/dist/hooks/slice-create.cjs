"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const fs = require("@slicemachine/plugin-kit/fs");
const commonTags = require("common-tags");
const checkIsTypeScriptProject = require("../lib/checkIsTypeScriptProject.cjs");
const pascalCase = require("../lib/pascalCase.cjs");
const rejectIfNecessary = require("../lib/rejectIfNecessary.cjs");
const upsertSliceLibraryIndexFile = require("../lib/upsertSliceLibraryIndexFile.cjs");
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b;
const createComponentFile = async ({ data, helpers, actions, options }) => {
  const pascalName = pascalCase.pascalCase(data.model.name);
  let contents;
  const isTypeScriptProject = await checkIsTypeScriptProject.checkIsTypeScriptProject({
    helpers,
    options
  });
  if (data.componentContents) {
    contents = data.componentContents;
  } else if (isTypeScriptProject) {
    contents = commonTags.source(_a || (_a = __template([`
			<script lang="ts">
				import type { Content } from '@prismicio/client';

				export let slice: Content.`, "Slice;\n			<\/script>\n\n			<section data-slice-type={slice.slice_type} data-slice-variation={slice.variation}>\n				Placeholder component for {slice.slice_type} (variation: {slice.variation}) Slices\n			</section>\n		"])), pascalName);
  } else {
    contents = commonTags.source(_b || (_b = __template(['\n			<script>\n				/** @type {import("@prismicio/client").Content.', "Slice} */\n				export let slice;\n			<\/script>\n\n			<section data-slice-type={slice.slice_type} data-slice-variation={slice.variation}>\n				Placeholder component for {slice.slice_type} (variation: {slice.variation}) Slices\n			</section>\n		"])), pascalName);
  }
  await fs.writeSliceFile({
    libraryID: data.libraryID,
    model: data.model,
    filename: "index.svelte",
    contents,
    format: options.format,
    actions,
    helpers,
    formatOptions: {
      prettier: {
        plugins: ["prettier-plugin-svelte"],
        parser: "svelte"
      }
    }
  });
};
const sliceCreate = async (data, context) => {
  rejectIfNecessary.rejectIfNecessary(await Promise.allSettled([
    fs.writeSliceModel({
      libraryID: data.libraryID,
      model: data.model,
      format: context.options.format,
      helpers: context.helpers
    }),
    createComponentFile({ data, ...context })
  ]));
  rejectIfNecessary.rejectIfNecessary(await Promise.allSettled([
    upsertSliceLibraryIndexFile.upsertSliceLibraryIndexFile({
      libraryID: data.libraryID,
      ...context
    }),
    fs.upsertGlobalTypeScriptTypes({
      filename: context.options.generatedTypesFilePath,
      format: context.options.format,
      helpers: context.helpers,
      actions: context.actions
    })
  ]));
};
exports.sliceCreate = sliceCreate;
//# sourceMappingURL=slice-create.cjs.map
