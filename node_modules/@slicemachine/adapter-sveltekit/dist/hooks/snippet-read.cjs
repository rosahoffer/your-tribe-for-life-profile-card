"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const dotPath = (...segments) => {
  return segments.flat().join(".");
};
const format = async (input, helpers) => {
  const formattedInput = await helpers.format(input, void 0, {
    includeNewlineAtEnd: false,
    prettier: {
      plugins: ["prettier-plugin-svelte"],
      parser: "svelte"
    }
  });
  return formattedInput;
};
const snippetRead = async (data, { helpers }) => {
  const { fieldPath } = data;
  const label = "Svelte";
  switch (data.model.type) {
    case "StructuredText": {
      return [
        {
          label: `${label} (components)`,
          language: "svelte",
          code: await format(commonTags.stripIndent`
							<PrismicRichText field={${dotPath(fieldPath)}} />
						`, helpers)
        },
        {
          label: `${label} (plain text)`,
          language: "svelte",
          code: await format(commonTags.stripIndent`
							<PrismicText field={${dotPath(fieldPath)}} />
						`, helpers)
        }
      ];
    }
    case "Link": {
      return {
        label,
        language: "svelte",
        code: await format(commonTags.stripIndent`
						<PrismicLink field={${dotPath(fieldPath)}}>Link</PrismicLink>
					`, helpers)
      };
    }
    case "Image": {
      return {
        label,
        language: "svelte",
        code: await format(commonTags.stripIndent`
							<PrismicImage field={${dotPath(fieldPath)}} />
						`, helpers)
      };
    }
    case "Group": {
      const code = await format(commonTags.stripIndent`
					{#each ${dotPath(fieldPath)} as item}
						<!-- Render content for item -->
					{/each}
				`, helpers);
      return {
        label,
        language: "svelte",
        code
      };
    }
    case "Slices": {
      const code = await format(commonTags.stripIndent`
					<SliceZone
					  slices={${dotPath(fieldPath)}}
					  {components}
					/>
				`, helpers);
      return {
        label,
        language: "svelte",
        code
      };
    }
    case "GeoPoint": {
      const code = await format(commonTags.stripIndent`
					{${dotPath(fieldPath, "latitude")}}, {${dotPath(fieldPath, "longitude")}}
				`, helpers);
      return {
        label,
        language: "svelte",
        code
      };
    }
    case "Embed": {
      const code = await format(commonTags.stripIndent`
					{@html ${dotPath(fieldPath, "html")}}
				`, helpers);
      return {
        label,
        language: "svelte",
        code
      };
    }
    default: {
      return {
        label,
        language: "svelte",
        code: await format(commonTags.stripIndent`
						{${dotPath(fieldPath)}}
					`, helpers)
      };
    }
  }
};
exports.snippetRead = snippetRead;
//# sourceMappingURL=snippet-read.cjs.map
