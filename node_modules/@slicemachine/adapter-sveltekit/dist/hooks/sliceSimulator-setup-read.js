import { source } from "common-tags";
import { createRequire } from "node:module";
import fetch from './../_node_modules/node-fetch/src/index.js';
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const REQUIRED_DEPENDENCIES = ["@prismicio/svelte"];
const createStep1 = async ({ project, helpers }) => {
  const require2 = createRequire(project.root);
  return {
    title: "Install packages",
    description: "The simulator requires some dependencies.",
    // TODO: Create a plugin runner helper to provide the correct
    // package manager
    body: source`
			The simulator requires extra dependencies. Run the following command to install them.

			~~~sh
			npm install --save ${REQUIRED_DEPENDENCIES.join(" ")}
			~~~
		`,
    validate: async () => {
      const missingDependencies = [];
      for (const dependency of REQUIRED_DEPENDENCIES) {
        try {
          require2.resolve(dependency, {
            paths: [helpers.joinPathFromRoot("node_modules")]
          });
        } catch {
          missingDependencies.push(dependency);
        }
      }
      if (missingDependencies.length >= REQUIRED_DEPENDENCIES.length) {
        return {
          title: "Missing all dependencies",
          message: source`
						Install the required dependencies to continue.
					`
        };
      }
      if (missingDependencies.length > 0) {
        const formattedMissingDependencies = missingDependencies.map((missingDependency) => `\`${missingDependency}\``).join(", ");
        return {
          title: "Missing some dependencies",
          message: source`
						The following dependencies are missing: ${formattedMissingDependencies}
					`
        };
      }
    }
  };
};
const createStep2 = async ({ helpers }) => {
  const filePath = helpers.joinPathFromRoot("src", "routes", "slice-simulator", "+page.svelte");
  const fileContents = await helpers.format(source(_a || (_a = __template(["\n			<script>\n				import { SliceSimulator } from '@slicemachine/adapter-sveltekit/simulator';\n				import { SliceZone } from '@prismicio/svelte';\n				import { components } from '$lib/slices';\n			<\/script>\n\n			<SliceSimulator let:slices>\n				<SliceZone {slices} {components} />\n			</SliceSimulator>\n		"]))), filePath, {
    includeNewlineAtEnd: false,
    prettier: {
      plugins: ["prettier-plugin-svelte"],
      parser: "svelte"
    }
  });
  return {
    title: "Create a page for the simulator",
    description: `Create a file at \`src/routes/slice-simulator/+page.svelte\` containing this code.`,
    body: source`
			Create a file at \`src/routes/slice-simulator/+page.svelte\` containing the following code. This route will be used to simulate and develop your components.

			~~~svelte
			${fileContents}
			~~~
		`
  };
};
const createStep3 = async ({ helpers }) => {
  const filePath = helpers.joinPathFromRoot("slicemachine.config.json");
  const fileContents = await helpers.format(source`
			{
				"localSliceSimulatorURL": "http://localhost:5173/slice-simulator"
			}
		`, filePath, {
    includeNewlineAtEnd: false
  });
  return {
    title: "Update `slicemachine.config.json`",
    description: `Update your \`slicemachine.config.json\` file with a \`localSliceSimulatorURL\` property pointing to your \`/slice-simulator\` page.`,
    body: source`
			Update your \`slicemachine.config.json\` file with a \`localSliceSimulatorURL\` property pointing to your \`/slice-simulator\` page.

			~~~json
			${fileContents}
			~~~
		`,
    validate: async () => {
      const project = await helpers.getProject();
      if (!("localSliceSimulatorURL" in project.config)) {
        return {
          title: "Missing `localSliceSimulatorURL` property",
          message: source`
						A \`localSliceSimulatorURL\` property was not found in your \`slicemachine.config.json\` file.
					`
        };
      }
      try {
        if (project.config.localSliceSimulatorURL) {
          new URL(project.config.localSliceSimulatorURL);
        } else {
          throw new Error("Undefined Slice Simulator URL");
        }
      } catch {
        return {
          title: "An invalid URL was provided",
          message: source`
						The \`localSliceSimulatorURL\` property should be of the shape \`http://localhost:PORT/PATH\`. See the codeblock for an example.
					`
        };
      }
      let res = void 0;
      try {
        res = await fetch(project.config.localSliceSimulatorURL);
      } catch (error) {
      }
      if (!res || !res.ok) {
        return {
          title: "Unable to connect to simulator page",
          message: source`
						Check that the \`localSliceSimulatorURL\` property in \`slicemachine.config.json\` is correct and try again. See the [troubleshooting page](https://prismic.io/docs/setup-nextjs) for more details.
					`
        };
      }
    }
  };
};
const sliceSimulatorSetupRead = async (_data, context) => {
  return await Promise.all([
    createStep1(context),
    createStep2(context),
    createStep3(context)
  ]);
};
export {
  sliceSimulatorSetupRead
};
//# sourceMappingURL=sliceSimulator-setup-read.js.map
