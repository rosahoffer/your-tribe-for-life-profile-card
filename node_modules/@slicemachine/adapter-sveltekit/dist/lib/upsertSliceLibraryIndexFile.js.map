{"version":3,"file":"upsertSliceLibraryIndexFile.js","sources":["../../../src/lib/upsertSliceLibraryIndexFile.ts"],"sourcesContent":["import { SliceMachineContext } from \"@slicemachine/plugin-kit\";\nimport {\n\tbuildSliceDirectoryPath,\n\tbuildSliceLibraryDirectoryPath,\n\twriteProjectFile,\n} from \"@slicemachine/plugin-kit/fs\";\nimport { stripIndent } from \"common-tags\";\nimport * as path from \"node:path\";\n\nimport { NON_EDITABLE_FILE_BANNER } from \"../constants\";\nimport { PluginOptions } from \"../types\";\n\nimport { pascalCase } from \"./pascalCase\";\nimport { getJSFileExtension } from \"./getJSFileExtension\";\n\ntype UpsertSliceLibraryIndexFileArgs = {\n\tlibraryID: string;\n} & SliceMachineContext<PluginOptions>;\n\nexport const upsertSliceLibraryIndexFile = async (\n\targs: UpsertSliceLibraryIndexFileArgs,\n): Promise<void> => {\n\tconst slices = await args.actions.readAllSliceModelsForLibrary({\n\t\tlibraryID: args.libraryID,\n\t});\n\n\tconst contents = stripIndent`\n\t\t${NON_EDITABLE_FILE_BANNER}\n\n\t\t${(\n\t\t\tawait Promise.all(\n\t\t\t\tslices.map(async (slice) => {\n\t\t\t\t\tconst dirName = path.basename(\n\t\t\t\t\t\tawait buildSliceDirectoryPath({\n\t\t\t\t\t\t\tmodel: slice.model,\n\t\t\t\t\t\t\thelpers: args.helpers,\n\t\t\t\t\t\t\tlibraryID: args.libraryID,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\tconst componentName = pascalCase(slice.model.name);\n\n\t\t\t\t\treturn `import ${componentName} from \"./${dirName}/index.svelte\";`;\n\t\t\t\t}),\n\t\t\t)\n\t\t).join(\"\\n\")}\n\n\t\texport const components = {\n\t\t\t${slices\n\t\t\t\t.map((slice) => {\n\t\t\t\t\tconst id = slice.model.id;\n\t\t\t\t\tconst componentName = pascalCase(slice.model.name);\n\n\t\t\t\t\treturn `${id}: ${componentName},`;\n\t\t\t\t})\n\t\t\t\t.join(\"\\n\")}\n\t\t}\n\t`;\n\n\tconst extension = await getJSFileExtension({\n\t\thelpers: args.helpers,\n\t\toptions: args.options,\n\t});\n\tconst filePath = path.join(\n\t\tbuildSliceLibraryDirectoryPath({\n\t\t\tlibraryID: args.libraryID,\n\t\t\thelpers: args.helpers,\n\t\t}),\n\t\t`index.${extension}`,\n\t);\n\n\tawait writeProjectFile({\n\t\tfilename: filePath,\n\t\tcontents,\n\t\tformat: args.options.format,\n\t\thelpers: args.helpers,\n\t});\n};\n"],"names":[],"mappings":";;;;;;AAmBa,MAAA,8BAA8B,OAC1C,SACkB;AAClB,QAAM,SAAS,MAAM,KAAK,QAAQ,6BAA6B;AAAA,IAC9D,WAAW,KAAK;AAAA,EAAA,CAChB;AAED,QAAM,WAAW;AAAA,IACd;AAAA;AAAA,KAGD,MAAM,QAAQ,IACb,OAAO,IAAI,OAAO,UAAS;AAC1B,UAAM,UAAU,KAAK,SACpB,MAAM,wBAAwB;AAAA,MAC7B,OAAO,MAAM;AAAA,MACb,SAAS,KAAK;AAAA,MACd,WAAW,KAAK;AAAA,IAChB,CAAA,CAAC;AAEH,UAAM,gBAAgB,WAAW,MAAM,MAAM,IAAI;AAEjD,WAAO,UAAU,yBAAyB;AAAA,EAAA,CAC1C,CAAC,GAEF,KAAK,IAAI;AAAA;AAAA;AAAA,KAGR,OACA,IAAI,CAAC,UAAS;AACR,UAAA,KAAK,MAAM,MAAM;AACvB,UAAM,gBAAgB,WAAW,MAAM,MAAM,IAAI;AAEjD,WAAO,GAAG,OAAO;AAAA,EAAA,CACjB,EACA,KAAK,IAAI;AAAA;AAAA;AAIP,QAAA,YAAY,MAAM,mBAAmB;AAAA,IAC1C,SAAS,KAAK;AAAA,IACd,SAAS,KAAK;AAAA,EAAA,CACd;AACK,QAAA,WAAW,KAAK,KACrB,+BAA+B;AAAA,IAC9B,WAAW,KAAK;AAAA,IAChB,SAAS,KAAK;AAAA,EACd,CAAA,GACD,SAAS,WAAW;AAGrB,QAAM,iBAAiB;AAAA,IACtB,UAAU;AAAA,IACV;AAAA,IACA,QAAQ,KAAK,QAAQ;AAAA,IACrB,SAAS,KAAK;AAAA,EAAA,CACd;AACF;"}