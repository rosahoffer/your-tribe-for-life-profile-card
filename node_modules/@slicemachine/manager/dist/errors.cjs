"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
class SliceMachineError extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "_sliceMachineError", true);
    __publicField(this, "name", "SliceMachineError");
  }
}
class UnauthorizedError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "UnauthorizedError");
  }
}
class UnauthenticatedError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "UnauthenticatedError");
    __publicField(this, "message", "Authenticate before trying again.");
  }
}
class NotFoundError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "NotFoundError");
  }
}
class UnexpectedDataError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "UnexpectedDataError");
  }
}
class InternalError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "InternalError");
  }
}
const isSliceMachineError = (error) => {
  if (typeof window !== "undefined") {
    return typeof error === "object" && error !== null;
  } else {
    return typeof error === "object" && error !== null && "_sliceMachineError" in error;
  }
};
const isUnauthorizedError = (error) => {
  return isSliceMachineError(error) && error.name === UnauthorizedError.name;
};
const isUnauthenticatedError = (error) => {
  return isSliceMachineError(error) && error.name === UnauthenticatedError.name;
};
const isNotFoundError = (error) => {
  return isSliceMachineError(error) && error.name === NotFoundError.name;
};
const isUnexpectedDataError = (error) => {
  return isSliceMachineError(error) && error.name === UnexpectedDataError.name;
};
const isInternalError = (error) => {
  return isSliceMachineError(error) && error.name === InternalError.name;
};
exports.InternalError = InternalError;
exports.NotFoundError = NotFoundError;
exports.SliceMachineError = SliceMachineError;
exports.UnauthenticatedError = UnauthenticatedError;
exports.UnauthorizedError = UnauthorizedError;
exports.UnexpectedDataError = UnexpectedDataError;
exports.isInternalError = isInternalError;
exports.isNotFoundError = isNotFoundError;
exports.isSliceMachineError = isSliceMachineError;
exports.isUnauthenticatedError = isUnauthenticatedError;
exports.isUnauthorizedError = isUnauthorizedError;
exports.isUnexpectedDataError = isUnexpectedDataError;
//# sourceMappingURL=errors.cjs.map
