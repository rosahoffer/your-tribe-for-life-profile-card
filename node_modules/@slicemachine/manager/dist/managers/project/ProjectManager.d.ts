import { ExecaChildProcess } from "execa";
import { PackageManager, SliceMachineConfig } from "../../types";
import { BaseManager } from "../BaseManager";
type ProjectManagerGetSliceMachineConfigPathArgs = {
    ignoreCache?: boolean;
};
type ProjectManagerGetRootArgs = {
    ignoreCache?: boolean;
};
type ProjectManagerCheckIsTypeScriptArgs = {
    rootOverride?: string;
};
type ProjectManagerWriteSliceMachineConfigArgs = {
    config: SliceMachineConfig;
    path?: string;
};
type ProjectManagerInitProjectArgs = {
    log?: (message: string) => void;
};
type ProjectManagerDetectPackageManager = {
    root?: string;
};
type ProjectManagerInstallDependenciesArgs = {
    dependencies: Record<string, string>;
    dev?: boolean;
    packageManager?: PackageManager;
    log?: (message: string) => void;
};
type ProjectManagerInstallDependenciesReturnType = {
    execaProcess: ExecaChildProcess;
};
export declare class ProjectManager extends BaseManager {
    private _cachedRoot;
    private _cachedSliceMachineConfigPath;
    private _cachedSliceMachineConfig;
    getSliceMachineConfigPath(args?: ProjectManagerGetSliceMachineConfigPathArgs): Promise<string>;
    getRoot(args?: ProjectManagerGetRootArgs): Promise<string>;
    suggestRoot(): Promise<string>;
    suggestSliceMachineConfigPath(): Promise<string>;
    checkIsTypeScript(args?: ProjectManagerCheckIsTypeScriptArgs): Promise<boolean>;
    getSliceMachineConfig(): Promise<SliceMachineConfig>;
    writeSliceMachineConfig(args: ProjectManagerWriteSliceMachineConfigArgs): Promise<void>;
    loadSliceMachineConfig(): Promise<SliceMachineConfig>;
    locateSliceMachineUIDir(): Promise<string>;
    getRepositoryName(): Promise<string>;
    getAdapterName(): Promise<string>;
    locateAdapterDir(): Promise<string>;
    initProject(args?: ProjectManagerInitProjectArgs): Promise<void>;
    detectPackageManager(args?: ProjectManagerDetectPackageManager): Promise<PackageManager>;
    installDependencies(args: ProjectManagerInstallDependenciesArgs): Promise<ProjectManagerInstallDependenciesReturnType>;
}
export {};
