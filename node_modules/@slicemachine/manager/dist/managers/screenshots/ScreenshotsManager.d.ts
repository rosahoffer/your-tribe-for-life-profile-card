/// <reference types="node" />
import { BaseManager } from "../BaseManager";
type Viewport = any;
type ScreenshotsManagerCaptureSliceSimulatorScreenshotArgs = {
    sliceMachineUIOrigin: string;
    libraryID: string;
    sliceID: string;
    variationID: string;
    viewport?: Viewport;
};
type ScreenshotsManagerCaptureSliceSimulatorScreenshotReturnType = {
    data: Buffer;
};
type ScreenshotsManagerUploadScreenshotArgs = {
    data: Buffer;
    keyPrefix?: string;
};
type ScreenshotsManagerUploadScreenshotReturnType = {
    url: string;
};
type ScreenshotsManagerDeleteScreenshotFolderArgs = {
    sliceID: string;
};
export declare class ScreenshotsManager extends BaseManager {
    private _browserContext;
    private _s3ACL;
    initBrowserContext(): Promise<void>;
    initS3ACL(): Promise<void>;
    captureSliceSimulatorScreenshot(args: ScreenshotsManagerCaptureSliceSimulatorScreenshotArgs): Promise<ScreenshotsManagerCaptureSliceSimulatorScreenshotReturnType>;
    uploadScreenshot(args: ScreenshotsManagerUploadScreenshotArgs): Promise<ScreenshotsManagerUploadScreenshotReturnType>;
    deleteScreenshotFolder(args: ScreenshotsManagerDeleteScreenshotFolderArgs): Promise<void>;
    private _fetch;
}
export {};
