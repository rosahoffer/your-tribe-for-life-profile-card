"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const t = require("io-ts");
const fetch = require("../../lib/fetch.cjs");
const assertPluginsInitialized = require("../../lib/assertPluginsInitialized.cjs");
const castArray = require("../../lib/castArray.cjs");
const decode = require("../../lib/decode.cjs");
const decodeHookResult = require("../../lib/decodeHookResult.cjs");
const functionCodec = require("../../lib/functionCodec.cjs");
const markdownToHTML = require("../../lib/markdownToHTML.cjs");
const errors = require("../../errors.cjs");
const BaseManager = require("../BaseManager.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const t__namespace = /* @__PURE__ */ _interopNamespaceDefault(t);
const sliceSimulatorSetupStepCodec = t__namespace.intersection([
  t__namespace.type({
    title: t__namespace.string,
    body: t__namespace.string
  }),
  t__namespace.partial({
    description: t__namespace.string,
    validate: functionCodec.functionCodec
  })
]);
const SliceSimulatorSetupStepValidationMessageCodec = t__namespace.type({
  title: t__namespace.string,
  message: t__namespace.string
});
class SimulatorManager extends BaseManager.BaseManager {
  async getLocalSliceSimulatorURL() {
    const sliceMachineConfig = await this.project.getSliceMachineConfig();
    return sliceMachineConfig.localSliceSimulatorURL;
  }
  /**
   * @throws {@link UnexpectedDataError} Thrown if the project is not configured
   *   with a Slice Simulator URL.
   */
  async checkIsLocalSliceSimulatorURLAccessible() {
    const localSliceSimulatorURL = await this.getLocalSliceSimulatorURL();
    if (!localSliceSimulatorURL) {
      throw new errors.UnexpectedDataError("The project has not been configured with a Slice Simulator URL. Add a `localSliceSimulatorURL` property to your project's configuration to fix this error.");
    }
    const res = await fetch.default(localSliceSimulatorURL);
    return res.ok;
  }
  async readSliceSimulatorSetupSteps() {
    assertPluginsInitialized.assertPluginsInitialized(this.sliceMachinePluginRunner);
    const hookResult = await this.sliceMachinePluginRunner.callHook("slice-simulator:setup:read", void 0);
    const { data, errors: errors2 } = decodeHookResult.decodeHookResult(t__namespace.array(sliceSimulatorSetupStepCodec), hookResult);
    const steps = await Promise.all(data[0].map(async (step) => {
      const bodyHTML = await markdownToHTML.markdownToHTML(step.body);
      const res = {
        title: step.title,
        description: step.description,
        body: bodyHTML,
        isComplete: void 0,
        validationMessages: []
      };
      if (step.validate) {
        const validationResult = await step.validate();
        const { value: validationMessages, error } = decode.decode(t__namespace.array(SliceSimulatorSetupStepValidationMessageCodec), validationResult == null ? [] : castArray.castArray(validationResult));
        if (error) {
          return res;
        }
        const isComplete = validationMessages.length < 1;
        const processedValidationMessages = await Promise.all(validationMessages.map(async (validationMessage) => {
          const messageHTML = await markdownToHTML.markdownToHTML(validationMessage.message);
          return {
            ...validationMessage,
            message: messageHTML
          };
        }));
        res.isComplete = isComplete;
        res.validationMessages = processedValidationMessages;
      }
      return res;
    }));
    return {
      steps,
      errors: errors2
    };
  }
  supportsSliceSimulator() {
    assertPluginsInitialized.assertPluginsInitialized(this.sliceMachinePluginRunner);
    const hooks = this.sliceMachinePluginRunner.hooksForType("slice-simulator:setup:read");
    return hooks.length > 0;
  }
}
exports.SimulatorManager = SimulatorManager;
//# sourceMappingURL=SimulatorManager.cjs.map
