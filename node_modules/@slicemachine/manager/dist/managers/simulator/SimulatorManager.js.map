{"version":3,"file":"SimulatorManager.js","sources":["../../../../src/managers/simulator/SimulatorManager.ts"],"sourcesContent":["import * as t from \"io-ts\";\nimport { HookError } from \"@slicemachine/plugin-kit\";\nimport fetch from \"../../lib/fetch\";\n\nimport { DecodeError } from \"../../lib/DecodeError\";\nimport { assertPluginsInitialized } from \"../../lib/assertPluginsInitialized\";\nimport { castArray } from \"../../lib/castArray\";\nimport { decode } from \"../../lib/decode\";\nimport { decodeHookResult } from \"../../lib/decodeHookResult\";\nimport { functionCodec } from \"../../lib/functionCodec\";\nimport { markdownToHTML } from \"../../lib/markdownToHTML\";\n\nimport { UnexpectedDataError } from \"../../errors\";\n\nimport { BaseManager } from \"../BaseManager\";\n\nconst sliceSimulatorSetupStepCodec = t.intersection([\n\tt.type({\n\t\ttitle: t.string,\n\t\tbody: t.string,\n\t}),\n\tt.partial({\n\t\tdescription: t.string,\n\t\tvalidate: functionCodec,\n\t}),\n]);\n\nconst SliceSimulatorSetupStepValidationMessageCodec = t.type({\n\ttitle: t.string,\n\tmessage: t.string,\n});\ntype SliceSimulatorSetupStepValidationMessageCodec = t.TypeOf<\n\ttypeof SliceSimulatorSetupStepValidationMessageCodec\n>;\n\nexport type SimulatorManagerReadSliceSimulatorSetupStep = {\n\ttitle: string;\n\tdescription?: string;\n\tbody: string;\n\t/**\n\t * Determines if the step is completed.\n\t *\n\t * This proeprty is `undefined` if the project's adapter does not provide a\n\t * validation function for the step; we cannot know if the step is complete\n\t * without a validator.\n\t */\n\tisComplete: boolean | undefined;\n\tvalidationMessages: SliceSimulatorSetupStepValidationMessageCodec[];\n};\n\nexport type SimulatorManagerReadSliceSimulatorSetupStepsReturnType = {\n\tsteps: SimulatorManagerReadSliceSimulatorSetupStep[];\n\terrors: (DecodeError | HookError)[];\n};\n\nexport class SimulatorManager extends BaseManager {\n\tasync getLocalSliceSimulatorURL(): Promise<string | undefined> {\n\t\tconst sliceMachineConfig = await this.project.getSliceMachineConfig();\n\n\t\treturn sliceMachineConfig.localSliceSimulatorURL;\n\t}\n\n\t/**\n\t * @throws {@link UnexpectedDataError} Thrown if the project is not configured\n\t *   with a Slice Simulator URL.\n\t */\n\tasync checkIsLocalSliceSimulatorURLAccessible(): Promise<boolean> {\n\t\tconst localSliceSimulatorURL = await this.getLocalSliceSimulatorURL();\n\n\t\tif (!localSliceSimulatorURL) {\n\t\t\tthrow new UnexpectedDataError(\n\t\t\t\t\"The project has not been configured with a Slice Simulator URL. Add a `localSliceSimulatorURL` property to your project's configuration to fix this error.\",\n\t\t\t);\n\t\t}\n\n\t\tconst res = await fetch(localSliceSimulatorURL);\n\n\t\treturn res.ok;\n\t}\n\n\tasync readSliceSimulatorSetupSteps(): Promise<SimulatorManagerReadSliceSimulatorSetupStepsReturnType> {\n\t\tassertPluginsInitialized(this.sliceMachinePluginRunner);\n\n\t\tconst hookResult = await this.sliceMachinePluginRunner.callHook(\n\t\t\t\"slice-simulator:setup:read\",\n\t\t\tundefined,\n\t\t);\n\t\tconst { data, errors } = decodeHookResult(\n\t\t\tt.array(sliceSimulatorSetupStepCodec),\n\t\t\thookResult,\n\t\t);\n\n\t\tconst steps = await Promise.all(\n\t\t\tdata[0].map(async (step) => {\n\t\t\t\tconst bodyHTML = await markdownToHTML(step.body);\n\n\t\t\t\tconst res: SimulatorManagerReadSliceSimulatorSetupStep = {\n\t\t\t\t\ttitle: step.title,\n\t\t\t\t\tdescription: step.description,\n\t\t\t\t\tbody: bodyHTML,\n\t\t\t\t\tisComplete: undefined,\n\t\t\t\t\tvalidationMessages: [],\n\t\t\t\t};\n\n\t\t\t\tif (step.validate) {\n\t\t\t\t\tconst validationResult = await step.validate();\n\t\t\t\t\tconst { value: validationMessages, error } = decode(\n\t\t\t\t\t\tt.array(SliceSimulatorSetupStepValidationMessageCodec),\n\t\t\t\t\t\tvalidationResult == null ? [] : castArray(validationResult),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\t// TODO: We may want to do\n\t\t\t\t\t\t// something with the error,\n\t\t\t\t\t\t// like log to the console.\n\t\t\t\t\t\t// This branch should only be\n\t\t\t\t\t\t// reached if the adapter\n\t\t\t\t\t\t// returns invalid data.\n\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isComplete = validationMessages.length < 1;\n\n\t\t\t\t\tconst processedValidationMessages = await Promise.all(\n\t\t\t\t\t\tvalidationMessages.map(async (validationMessage) => {\n\t\t\t\t\t\t\tconst messageHTML = await markdownToHTML(\n\t\t\t\t\t\t\t\tvalidationMessage.message,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...validationMessage,\n\t\t\t\t\t\t\t\tmessage: messageHTML,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\tres.isComplete = isComplete;\n\t\t\t\t\tres.validationMessages = processedValidationMessages;\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}),\n\t\t);\n\n\t\treturn {\n\t\t\tsteps,\n\t\t\terrors,\n\t\t};\n\t}\n\n\tsupportsSliceSimulator(): boolean {\n\t\tassertPluginsInitialized(this.sliceMachinePluginRunner);\n\n\t\tconst hooks = this.sliceMachinePluginRunner.hooksForType(\n\t\t\t\"slice-simulator:setup:read\",\n\t\t);\n\n\t\treturn hooks.length > 0;\n\t}\n}\n"],"names":[],"mappings":";;;;;;;;;;AAgBA,MAAM,+BAA+B,EAAE,aAAa;AAAA,EACnD,EAAE,KAAK;AAAA,IACN,OAAO,EAAE;AAAA,IACT,MAAM,EAAE;AAAA,EAAA,CACR;AAAA,EACD,EAAE,QAAQ;AAAA,IACT,aAAa,EAAE;AAAA,IACf,UAAU;AAAA,EAAA,CACV;AACD,CAAA;AAED,MAAM,gDAAgD,EAAE,KAAK;AAAA,EAC5D,OAAO,EAAE;AAAA,EACT,SAAS,EAAE;AACX,CAAA;AAyBK,MAAO,yBAAyB,YAAW;AAAA,EAChD,MAAM,4BAAyB;AAC9B,UAAM,qBAAqB,MAAM,KAAK,QAAQ,sBAAqB;AAEnE,WAAO,mBAAmB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,0CAAuC;AACtC,UAAA,yBAAyB,MAAM,KAAK;AAE1C,QAAI,CAAC,wBAAwB;AACtB,YAAA,IAAI,oBACT,4JAA4J;AAAA,IAE7J;AAEK,UAAA,MAAM,MAAM,MAAM,sBAAsB;AAE9C,WAAO,IAAI;AAAA,EACZ;AAAA,EAEA,MAAM,+BAA4B;AACjC,6BAAyB,KAAK,wBAAwB;AAEtD,UAAM,aAAa,MAAM,KAAK,yBAAyB,SACtD,8BACA,MAAS;AAEJ,UAAA,EAAE,MAAM,OAAM,IAAK,iBACxB,EAAE,MAAM,4BAA4B,GACpC,UAAU;AAGL,UAAA,QAAQ,MAAM,QAAQ,IAC3B,KAAK,CAAC,EAAE,IAAI,OAAO,SAAQ;AAC1B,YAAM,WAAW,MAAM,eAAe,KAAK,IAAI;AAE/C,YAAM,MAAmD;AAAA,QACxD,OAAO,KAAK;AAAA,QACZ,aAAa,KAAK;AAAA,QAClB,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,oBAAoB,CAAE;AAAA,MAAA;AAGvB,UAAI,KAAK,UAAU;AACZ,cAAA,mBAAmB,MAAM,KAAK;AACpC,cAAM,EAAE,OAAO,oBAAoB,MAAK,IAAK,OAC5C,EAAE,MAAM,6CAA6C,GACrD,oBAAoB,OAAO,CAAK,IAAA,UAAU,gBAAgB,CAAC;AAG5D,YAAI,OAAO;AAQH,iBAAA;AAAA,QACP;AAEK,cAAA,aAAa,mBAAmB,SAAS;AAE/C,cAAM,8BAA8B,MAAM,QAAQ,IACjD,mBAAmB,IAAI,OAAO,sBAAqB;AAClD,gBAAM,cAAc,MAAM,eACzB,kBAAkB,OAAO;AAGnB,iBAAA;AAAA,YACN,GAAG;AAAA,YACH,SAAS;AAAA,UAAA;AAAA,QAEV,CAAA,CAAC;AAGH,YAAI,aAAa;AACjB,YAAI,qBAAqB;AAAA,MACzB;AAEM,aAAA;AAAA,IACP,CAAA,CAAC;AAGI,WAAA;AAAA,MACN;AAAA,MACA;AAAA,IAAA;AAAA,EAEF;AAAA,EAEA,yBAAsB;AACrB,6BAAyB,KAAK,wBAAwB;AAEtD,UAAM,QAAQ,KAAK,yBAAyB,aAC3C,4BAA4B;AAG7B,WAAO,MAAM,SAAS;AAAA,EACvB;AACA;"}