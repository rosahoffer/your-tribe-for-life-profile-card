import * as t from "io-ts";
import { HookError } from "@slicemachine/plugin-kit";
import { DecodeError } from "../../lib/DecodeError";
import { BaseManager } from "../BaseManager";
declare const SliceSimulatorSetupStepValidationMessageCodec: t.TypeC<{
    title: t.StringC;
    message: t.StringC;
}>;
type SliceSimulatorSetupStepValidationMessageCodec = t.TypeOf<typeof SliceSimulatorSetupStepValidationMessageCodec>;
export type SimulatorManagerReadSliceSimulatorSetupStep = {
    title: string;
    description?: string;
    body: string;
    /**
     * Determines if the step is completed.
     *
     * This proeprty is `undefined` if the project's adapter does not provide a
     * validation function for the step; we cannot know if the step is complete
     * without a validator.
     */
    isComplete: boolean | undefined;
    validationMessages: SliceSimulatorSetupStepValidationMessageCodec[];
};
export type SimulatorManagerReadSliceSimulatorSetupStepsReturnType = {
    steps: SimulatorManagerReadSliceSimulatorSetupStep[];
    errors: (DecodeError | HookError)[];
};
export declare class SimulatorManager extends BaseManager {
    getLocalSliceSimulatorURL(): Promise<string | undefined>;
    /**
     * @throws {@link UnexpectedDataError} Thrown if the project is not configured
     *   with a Slice Simulator URL.
     */
    checkIsLocalSliceSimulatorURLAccessible(): Promise<boolean>;
    readSliceSimulatorSetupSteps(): Promise<SimulatorManagerReadSliceSimulatorSetupStepsReturnType>;
    supportsSliceSimulator(): boolean;
}
export {};
