import { BaseManager } from "../BaseManager";
import { SegmentEvents } from "./types";
type TelemetryManagerInitTelemetryArgs = {
    appName: string;
    appVersion: string;
};
type TelemetryManagerTrackArgs = SegmentEvents;
type TelemetryManagerIdentifyArgs = {
    userID: string;
    intercomHash: string;
};
type TelemetryManagerGroupArgs = {
    manualLibsCount: number;
    downloadedLibsCount: number;
    npmLibsCount: number;
    downloadedLibs: string[];
};
export declare class TelemetryManager extends BaseManager {
    private _segmentClient;
    private _anonymousID;
    private _userID;
    private _context;
    initTelemetry(args: TelemetryManagerInitTelemetryArgs): Promise<void>;
    track(args: TelemetryManagerTrackArgs): Promise<void>;
    identify(args: TelemetryManagerIdentifyArgs): Promise<void>;
    group(args: TelemetryManagerGroupArgs): Promise<void>;
    checkIsTelemetryEnabled(): Promise<boolean>;
}
export {};
