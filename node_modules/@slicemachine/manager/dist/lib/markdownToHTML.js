import { visit } from './../_node_modules/unist-util-visit/lib/index.js';
const createRehypeStarryNight = async () => {
  const { createStarryNight, common } = await import("@wooorm/starry-night");
  const { default: tsxGrammar } = await import("@wooorm/starry-night/lang/source.tsx.js");
  const { default: vueGrammar } = await import("@wooorm/starry-night/lang/text.html.vue.js");
  const { toString } = await import("hast-util-to-string");
  return (options = {}) => {
    const grammars = options.grammars || [...common, tsxGrammar, vueGrammar];
    const starryNightPromise = createStarryNight(grammars);
    const prefix = "language-";
    return async (tree) => {
      const starryNight = await starryNightPromise;
      visit(tree, "element", function(node, index, parent) {
        if (!parent || index === null || node.tagName !== "pre") {
          return;
        }
        const head = node.children[0];
        if (!head || head.type !== "element" || head.tagName !== "code" || !head.properties) {
          return;
        }
        const classes = head.properties.className;
        if (!Array.isArray(classes)) {
          return;
        }
        const language = classes.find((d) => typeof d === "string" && d.startsWith(prefix));
        if (typeof language !== "string") {
          return;
        }
        const scope = starryNight.flagToScope(language.slice(prefix.length));
        if (!scope) {
          return;
        }
        const fragment = starryNight.highlight(toString(head), scope);
        const children = fragment.children;
        parent.children.splice(index, 1, {
          type: "element",
          tagName: "div",
          properties: {
            className: [
              "highlight",
              "highlight-" + scope.replace(/^source\./, "").replace(/\./g, "-")
            ]
          },
          children: [
            { type: "element", tagName: "pre", properties: {}, children }
          ]
        });
      });
    };
  };
};
let processor;
const markdownToHTML = async (markdown) => {
  if (!processor) {
    const { unified } = await import("unified");
    const remarkParse = await import("remark-parse");
    const remarkGfm = await import("remark-gfm");
    const remarkRehype = await import("remark-rehype");
    const rehypeStringify = await import("rehype-stringify");
    const rehypeStarryNight = await createRehypeStarryNight();
    processor = unified().use(remarkParse.default).use(remarkGfm.default).use(remarkRehype.default).use(rehypeStarryNight).use(rehypeStringify.default);
  }
  const virtualFile = await processor.process(markdown);
  return virtualFile.toString();
};
export {
  markdownToHTML
};
//# sourceMappingURL=markdownToHTML.js.map
