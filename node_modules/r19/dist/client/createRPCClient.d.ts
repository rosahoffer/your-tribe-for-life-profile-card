/// <reference types="node" />
import { Procedures, Procedure } from "../types";
export type RPCClient<TProcedures extends Procedures> = TransformProcedures<TProcedures>;
type TransformProcedures<TProcedures> = TProcedures extends Procedures ? {
    [P in keyof TProcedures]: TransformProcedures<TProcedures[P]>;
} : TProcedures extends Procedure<any> ? TransformProcedure<TProcedures> : TProcedures;
type TransformProcedure<TProcedure extends Procedure<any>> = (...args: Parameters<TProcedure> extends [] ? [] : [TransformProcedureArgs<Parameters<TProcedure>[0]>]) => Promise<TransformProcedureReturnType<Awaited<ReturnType<TProcedure>>>>;
type TransformProcedureArgs<TArgs> = TArgs extends Record<string, unknown> | unknown[] ? {
    [P in keyof TArgs]: TransformProcedureArgs<TArgs[P]>;
} : TArgs extends Buffer ? Blob : TArgs;
type TransformProcedureReturnType<TReturnType> = TReturnType extends Record<string, unknown> | unknown[] ? {
    [P in keyof TReturnType]: TransformProcedureReturnType<TReturnType[P]>;
} : TReturnType extends Buffer ? Blob : TReturnType extends Error ? {
    name: string;
    message: string;
} : TReturnType;
export type ResponseLike = {
    arrayBuffer: () => Promise<ArrayBuffer>;
};
export type FetchLike = (input: string, init: {
    method: "POST";
    body: any;
    headers: Record<string, string>;
}) => Promise<ResponseLike>;
export type CreateRPCClientArgs = {
    serverURL: string;
    fetch?: FetchLike;
};
export declare const createRPCClient: <TProcedures extends Procedures>(args: CreateRPCClientArgs) => TransformProcedures<TProcedures>;
export {};
