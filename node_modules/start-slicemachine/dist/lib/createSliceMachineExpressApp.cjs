"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("node:path");
require('./../_node_modules/@sentry/node/esm/index.cjs');
const express = require("express");
const bodyParser = require("body-parser");
require("http-proxy-middleware");
const serveStatic = require("serve-static");
const cors = require("cors");
const manager = require("@slicemachine/manager");
const sentryErrorHandlers = require("./sentryErrorHandlers.cjs");
const sentryFrontendTunnel = require("./sentryFrontendTunnel.cjs");
const checkIsSentryEnabled = require("./checkIsSentryEnabled.cjs");
const exports$1 = require('./../_node_modules/@sentry/core/esm/exports.cjs');
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const createSliceMachineExpressApp = async (args) => {
  const isTelemetryEnabled = await args.sliceMachineManager.telemetry.checkIsTelemetryEnabled();
  const app = express();
  app.use(cors());
  app.use("/_manager", manager.createSliceMachineManagerMiddleware({
    sliceMachineManager: args.sliceMachineManager,
    onError: isTelemetryEnabled ? sentryErrorHandlers.rpc : void 0
  }));
  app.use("/api/auth", manager.createPrismicAuthManagerMiddleware({
    prismicAuthManager: args.sliceMachineManager.getPrismicAuthManager(),
    onLoginCallback: async () => {
      const profile = await args.sliceMachineManager.user.getProfile();
      await args.sliceMachineManager.telemetry.identify({
        userID: profile.shortId,
        intercomHash: profile.intercomHash
      });
      if (checkIsSentryEnabled.checkIsSentryEnabled()) {
        exports$1.setUser({ id: profile.shortId });
      }
      try {
        await args.sliceMachineManager.screenshots.initS3ACL();
      } catch (error) {
      }
    }
  }));
  app.use("/api/t", bodyParser.text({ type: "*/*" }), sentryFrontendTunnel.sentryFrontendTunnel);
  {
    const sliceMachineDir = await args.sliceMachineManager.project.locateSliceMachineUIDir();
    const sliceMachineOutDir = path__namespace.resolve(sliceMachineDir, "out");
    app.use(serveStatic(sliceMachineOutDir));
    app.get("/changelog", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "changelog.html"));
    });
    app.get("/slices", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "slices.html"));
    });
    app.get("/changes", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "changes.html"));
    });
    app.get("/page-types/:id", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "page-types/[pageTypeId].html"));
    });
    app.get("/custom-types", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "custom-types.html"));
    });
    app.get("/custom-types/:id", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "custom-types/[customTypeId].html"));
    });
    app.get("/:lib/:sliceID/:variation", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "[lib]/[sliceName]/[variation].html"));
    });
    app.get("/:lib/:sliceID/:variation/simulator", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "[lib]/[sliceName]/[variation]/simulator.html"));
    });
    app.get("/:lib/:sliceID/:variation/screenshot", (_req, res) => {
      res.sendFile(path__namespace.join(sliceMachineOutDir, "[lib]/[sliceName]/[variation]/screenshot.html"));
    });
  }
  if (isTelemetryEnabled) {
    app.use(sentryErrorHandlers.server);
  }
  return app;
};
exports.createSliceMachineExpressApp = createSliceMachineExpressApp;
//# sourceMappingURL=createSliceMachineExpressApp.cjs.map
