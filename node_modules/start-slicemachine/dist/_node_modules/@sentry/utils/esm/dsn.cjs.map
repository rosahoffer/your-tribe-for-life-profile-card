{"version":3,"file":"dsn.cjs","sources":["../../../../../../../node_modules/@sentry/utils/esm/dsn.js"],"sourcesContent":["import { SentryError } from './error.js';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn, withPassword = false) {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() ;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol , publicKey });\n}\n\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn) {\n  if (!(typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}\n\nexport { dsnFromString, dsnToString, makeDsn };\n//# sourceMappingURL=dsn.js.map\n"],"names":["SentryError"],"mappings":";;;AAGA,MAAM,YAAY;AAElB,SAAS,gBAAgB,UAAU;AACjC,SAAO,aAAa,UAAU,aAAa;AAC7C;AAWA,SAAS,YAAY,KAAK,eAAe,OAAO;AAC9C,QAAM,EAAE,MAAM,MAAM,MAAM,MAAM,WAAW,UAAU,UAAW,IAAG;AACnE,SACE,GAAG,cAAc,YAAY,gBAAgB,OAAO,IAAI,SAAS,MAC7D,OAAO,OAAO,IAAI,SAAS,MAAM,OAAO,GAAG,UAAU,OAAO;AAEpE;AAQA,SAAS,cAAc,KAAK;AAC1B,QAAM,QAAQ,UAAU,KAAK,GAAG;AAEhC,MAAI,CAAC,OAAO;AACV,UAAM,IAAIA,MAAAA,YAAY,uBAAuB,KAAK;AAAA,EACnD;AAED,QAAM,CAAC,UAAU,WAAW,OAAO,IAAI,MAAM,OAAO,IAAI,QAAQ,IAAI,MAAM,MAAM,CAAC;AACjF,MAAI,OAAO;AACX,MAAI,YAAY;AAEhB,QAAM,QAAQ,UAAU,MAAM,GAAG;AACjC,MAAI,MAAM,SAAS,GAAG;AACpB,WAAO,MAAM,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG;AAClC,gBAAY,MAAM;EACnB;AAED,MAAI,WAAW;AACb,UAAM,eAAe,UAAU,MAAM,MAAM;AAC3C,QAAI,cAAc;AAChB,kBAAY,aAAa,CAAC;AAAA,IAC3B;AAAA,EACF;AAED,SAAO,kBAAkB,EAAE,MAAM,MAAM,MAAM,WAAW,MAAM,UAAqB,UAAW,CAAA;AAChG;AAEA,SAAS,kBAAkB,YAAY;AACrC,SAAO;AAAA,IACL,UAAU,WAAW;AAAA,IACrB,WAAW,WAAW,aAAa;AAAA,IACnC,MAAM,WAAW,QAAQ;AAAA,IACzB,MAAM,WAAW;AAAA,IACjB,MAAM,WAAW,QAAQ;AAAA,IACzB,MAAM,WAAW,QAAQ;AAAA,IACzB,WAAW,WAAW;AAAA,EAC1B;AACA;AAEA,SAAS,YAAY,KAAK;AACxB,MAAI,EAAE,OAAO,qBAAqB,eAAe,mBAAmB;AAClE;AAAA,EACD;AAED,QAAM,EAAE,MAAM,WAAW,SAAQ,IAAK;AAEtC,QAAM,qBAAqB,CAAC,YAAY,aAAa,QAAQ,WAAW;AACxE,qBAAmB,QAAQ,eAAa;AACtC,QAAI,CAAC,IAAI,SAAS,GAAG;AACnB,YAAM,IAAIA,MAAW,YAAC,uBAAuB,mBAAmB;AAAA,IACjE;AAAA,EACL,CAAG;AAED,MAAI,CAAC,UAAU,MAAM,OAAO,GAAG;AAC7B,UAAM,IAAIA,MAAAA,YAAY,yCAAyC,WAAW;AAAA,EAC3E;AAED,MAAI,CAAC,gBAAgB,QAAQ,GAAG;AAC9B,UAAM,IAAIA,MAAAA,YAAY,wCAAwC,UAAU;AAAA,EACzE;AAED,MAAI,QAAQ,MAAM,SAAS,MAAM,EAAE,CAAC,GAAG;AACrC,UAAM,IAAIA,MAAAA,YAAY,oCAAoC,MAAM;AAAA,EACjE;AAED,SAAO;AACT;AAGA,SAAS,QAAQ,MAAM;AACrB,QAAM,aAAa,OAAO,SAAS,WAAW,cAAc,IAAI,IAAI,kBAAkB,IAAI;AAC1F,cAAY,UAAU;AACtB,SAAO;AACT;;;;","x_google_ignoreList":[0]}