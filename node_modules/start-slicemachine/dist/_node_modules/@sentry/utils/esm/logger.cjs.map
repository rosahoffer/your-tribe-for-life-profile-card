{"version":3,"file":"logger.cjs","sources":["../../../../../../../node_modules/@sentry/utils/esm/logger.js"],"sourcesContent":["import { getGlobalSingleton, GLOBAL_OBJ } from './worldwide.js';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nconst CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] ;\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const originalConsole = GLOBAL_OBJ.console ;\n  const wrappedLevels = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] ).__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] ;\n      originalConsole[level] = originalWrappedFunc ;\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level ];\n    });\n  }\n}\n\nfunction makeLogger() {\n  let enabled = false;\n  const logger = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger ;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger;\nif ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { CONSOLE_LEVELS, consoleSandbox, logger };\n//# sourceMappingURL=logger.js.map\n"],"names":["GLOBAL_OBJ","logger","getGlobalSingleton"],"mappings":";;;AAGA,MAAM,SAAS;AAEV,MAAC,iBAAiB,CAAC,SAAS,QAAQ,QAAQ,SAAS,OAAO,UAAU,OAAO;AAQlF,SAAS,eAAe,UAAU;AAChC,MAAI,EAAE,aAAaA,UAAAA,aAAa;AAC9B,WAAO,SAAQ;AAAA,EAChB;AAED,QAAM,kBAAkBA,UAAU,WAAC;AACnC,QAAM,gBAAgB,CAAA;AAGtB,iBAAe,QAAQ,WAAS;AAE9B,UAAM,sBACJ,gBAAgB,KAAK,KAAM,gBAAgB,KAAK,EAAI;AACtD,QAAI,SAAS,mBAAmB,qBAAqB;AACnD,oBAAc,KAAK,IAAI,gBAAgB,KAAK;AAC5C,sBAAgB,KAAK,IAAI;AAAA,IAC1B;AAAA,EACL,CAAG;AAED,MAAI;AACF,WAAO,SAAQ;AAAA,EACnB,UAAY;AAER,WAAO,KAAK,aAAa,EAAE,QAAQ,WAAS;AAC1C,sBAAgB,KAAK,IAAI,cAAc,KAAK;AAAA,IAClD,CAAK;AAAA,EACF;AACH;AAEA,SAAS,aAAa;AACpB,MAAI,UAAU;AACd,QAAM,SAAS;AAAA,IACb,QAAQ,MAAM;AACZ,gBAAU;AAAA,IACX;AAAA,IACD,SAAS,MAAM;AACb,gBAAU;AAAA,IACX;AAAA,EACL;AAEE,MAAK,OAAO,qBAAqB,eAAe,kBAAmB;AACjE,mBAAe,QAAQ,UAAQ;AAE7B,aAAO,IAAI,IAAI,IAAI,SAAS;AAC1B,YAAI,SAAS;AACX,yBAAe,MAAM;AACnBA,sBAAAA,WAAW,QAAQ,IAAI,EAAE,GAAG,UAAU,UAAU,GAAG,IAAI;AAAA,UACnE,CAAW;AAAA,QACF;AAAA,MACT;AAAA,IACA,CAAK;AAAA,EACL,OAAS;AACL,mBAAe,QAAQ,UAAQ;AAC7B,aAAO,IAAI,IAAI,MAAM;AAAA,IAC3B,CAAK;AAAA,EACF;AAED,SAAO;AACT;AAGIC,QAAO,SAAA;AACX,IAAK,OAAO,qBAAqB,eAAe,kBAAmB;AACjEA,UAAAA,SAASC,UAAkB,mBAAC,UAAU,UAAU;AAClD,OAAO;AACLD,UAAM,SAAG,WAAU;AACrB;;;","x_google_ignoreList":[0]}