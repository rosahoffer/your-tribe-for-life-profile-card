{"version":3,"file":"client.cjs","sources":["../../../../../../../node_modules/@sentry/node/esm/client.js"],"sourcesContent":["import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { BaseClient, SDK_VERSION, SessionFlusher } from '@sentry/core';\nimport { logger, resolvedSyncPromise } from '@sentry/utils';\nimport * as os from 'os';\nimport { TextEncoder } from 'util';\nimport { eventFromUnknownInput, eventFromMessage } from './eventbuilder.js';\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeClientOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nclass NodeClient extends BaseClient {\n\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n   constructor(options) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.node',\n      packages: [\n        {\n          name: 'npm:@sentry/node',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    // Until node supports global TextEncoder in all versions we support, we are forced to pass it from util\n    options.transportOptions = {\n      textEncoder: new TextEncoder(),\n      ...options.transportOptions,\n    };\n\n    super(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n   captureException(exception, hint, scope) {\n    // Check if the flag `autoSessionTracking` is enabled, and if `_sessionFlusher` exists because it is initialised only\n    // when the `requestHandler` middleware is used, and hence the expectation is to have SessionAggregates payload\n    // sent to the Server only when the `requestHandler` middleware is used\n    if (this._options.autoSessionTracking && this._sessionFlusher && scope) {\n      const requestSession = scope.getRequestSession();\n\n      // Necessary checks to ensure this is code block is executed only within a request\n      // Should override the status only if `requestSession.status` is `Ok`, which is its initial stage\n      if (requestSession && requestSession.status === 'ok') {\n        requestSession.status = 'errored';\n      }\n    }\n\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   captureEvent(event, hint, scope) {\n    // Check if the flag `autoSessionTracking` is enabled, and if `_sessionFlusher` exists because it is initialised only\n    // when the `requestHandler` middleware is used, and hence the expectation is to have SessionAggregates payload\n    // sent to the Server only when the `requestHandler` middleware is used\n    if (this._options.autoSessionTracking && this._sessionFlusher && scope) {\n      const eventType = event.type || 'exception';\n      const isException =\n        eventType === 'exception' && event.exception && event.exception.values && event.exception.values.length > 0;\n\n      // If the event is of type Exception, then a request session should be captured\n      if (isException) {\n        const requestSession = scope.getRequestSession();\n\n        // Ensure that this is happening within the bounds of a request, and make sure not to override\n        // Session Status if Errored / Crashed\n        if (requestSession && requestSession.status === 'ok') {\n          requestSession.status = 'errored';\n        }\n      }\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   *\n   * @inheritdoc\n   */\n   close(timeout) {\n    _optionalChain([this, 'access', _ => _._sessionFlusher, 'optionalAccess', _2 => _2.close, 'call', _3 => _3()]);\n    return super.close(timeout);\n  }\n\n  /** Method that initialises an instance of SessionFlusher on Client */\n   initSessionFlusher() {\n    const { release, environment } = this._options;\n    if (!release) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Cannot initialise an instance of SessionFlusher if no release is provided!');\n    } else {\n      this._sessionFlusher = new SessionFlusher(this, {\n        release,\n        environment,\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n   eventFromException(exception, hint) {\n    return resolvedSyncPromise(eventFromUnknownInput(this._options.stackParser, exception, hint));\n  }\n\n  /**\n   * @inheritDoc\n   */\n   eventFromMessage(\n    message,\n    // eslint-disable-next-line deprecation/deprecation\n    level = 'info',\n    hint,\n  ) {\n    return resolvedSyncPromise(\n      eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n   _prepareEvent(event, hint, scope) {\n    event.platform = event.platform || 'node';\n    event.contexts = {\n      ...event.contexts,\n      runtime: _optionalChain([event, 'access', _4 => _4.contexts, 'optionalAccess', _5 => _5.runtime]) || {\n        name: 'node',\n        version: global.process.version,\n      },\n    };\n    event.server_name =\n      event.server_name || this.getOptions().serverName || global.process.env.SENTRY_NAME || os.hostname();\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Method responsible for capturing/ending a request session by calling `incrementSessionStatusCount` to increment\n   * appropriate session aggregates bucket\n   */\n   _captureRequestSession() {\n    if (!this._sessionFlusher) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Discarded request mode session because autoSessionTracking option was disabled');\n    } else {\n      this._sessionFlusher.incrementSessionStatusCount();\n    }\n  }\n}\n\nexport { NodeClient };\n//# sourceMappingURL=client.js.map\n"],"names":["BaseClient","SDK_VERSION","TextEncoder","_optionalChain","logger","SessionFlusher","resolvedSyncPromise","eventFromUnknownInput","eventFromMessage","os"],"mappings":"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","x_google_ignoreList":[0]}