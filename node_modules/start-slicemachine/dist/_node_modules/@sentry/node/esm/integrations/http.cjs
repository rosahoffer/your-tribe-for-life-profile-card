"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
require("../../../../lru_map/lru.cjs");
const http = require("./utils/http.cjs");
const misc = require("../../../utils/esm/misc.cjs");
const _optionalChain = require("../../../utils/esm/buildPolyfills/_optionalChain.cjs");
const logger = require("../../../utils/esm/logger.cjs");
const object = require("../../../utils/esm/object.cjs");
const lru = require("../../../../../_virtual/lru.cjs");
const hub = require("../../../core/esm/hub.cjs");
const baggage = require("../../../utils/esm/baggage.cjs");
const string = require("../../../utils/esm/string.cjs");
const NODE_VERSION = misc.parseSemver(process.versions.node);
class Http {
  /**
   * @inheritDoc
   */
  static __initStatic() {
    this.id = "Http";
  }
  /**
   * @inheritDoc
   */
  __init() {
    this.name = Http.id;
  }
  /**
   * @inheritDoc
   */
  constructor(options = {}) {
    Http.prototype.__init.call(this);
    this._breadcrumbs = typeof options.breadcrumbs === "undefined" ? true : options.breadcrumbs;
    this._tracing = !options.tracing ? void 0 : options.tracing === true ? {} : options.tracing;
  }
  /**
   * @inheritDoc
   */
  setupOnce(_addGlobalEventProcessor, setupOnceGetCurrentHub) {
    if (!this._breadcrumbs && !this._tracing) {
      return;
    }
    const clientOptions = _optionalChain._optionalChain([setupOnceGetCurrentHub, "call", (_) => _(), "access", (_2) => _2.getClient, "call", (_3) => _3(), "optionalAccess", (_4) => _4.getOptions, "call", (_5) => _5()]);
    if (clientOptions && clientOptions.instrumenter !== "sentry") {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.logger.log("HTTP Integration is skipped because of instrumenter configuration.");
      return;
    }
    const tracingOptions = this._tracing ? { ...clientOptions, ...this._tracing } : void 0;
    const httpModule = require("http");
    const wrappedHttpHandlerMaker = _createWrappedRequestMethodFactory(this._breadcrumbs, tracingOptions, httpModule);
    object.fill(httpModule, "get", wrappedHttpHandlerMaker);
    object.fill(httpModule, "request", wrappedHttpHandlerMaker);
    if (NODE_VERSION.major && NODE_VERSION.major > 8) {
      const httpsModule = require("https");
      const wrappedHttpsHandlerMaker = _createWrappedRequestMethodFactory(
        this._breadcrumbs,
        tracingOptions,
        httpsModule
      );
      object.fill(httpsModule, "get", wrappedHttpsHandlerMaker);
      object.fill(httpsModule, "request", wrappedHttpsHandlerMaker);
    }
  }
}
Http.__initStatic();
function _createWrappedRequestMethodFactory(breadcrumbsEnabled, tracingOptions, httpModule) {
  const createSpanUrlMap = new lru.__exports.LRUMap(100);
  const headersUrlMap = {};
  const shouldCreateSpan = (url) => {
    if (_optionalChain._optionalChain([tracingOptions, "optionalAccess", (_6) => _6.shouldCreateSpanForRequest]) === void 0) {
      return true;
    }
    const cachedDecision = createSpanUrlMap.get(url);
    if (cachedDecision !== void 0) {
      return cachedDecision;
    }
    const decision = tracingOptions.shouldCreateSpanForRequest(url);
    createSpanUrlMap.set(url, decision);
    return decision;
  };
  const shouldAttachTraceData = (url) => {
    if (_optionalChain._optionalChain([tracingOptions, "optionalAccess", (_7) => _7.tracePropagationTargets]) === void 0) {
      return true;
    }
    if (headersUrlMap[url]) {
      return headersUrlMap[url];
    }
    headersUrlMap[url] = string.stringMatchesSomePattern(url, tracingOptions.tracePropagationTargets);
    return headersUrlMap[url];
  };
  return function wrappedRequestMethodFactory(originalRequestMethod) {
    return function wrappedMethod(...args) {
      const requestArgs = http.normalizeRequestArgs(httpModule, args);
      const requestOptions = requestArgs[0];
      const requestUrl = http.extractUrl(requestOptions);
      if (http.isSentryRequest(requestUrl)) {
        return originalRequestMethod.apply(httpModule, requestArgs);
      }
      let requestSpan;
      let parentSpan;
      const scope = hub.getCurrentHub().getScope();
      if (scope && tracingOptions && shouldCreateSpan(requestUrl)) {
        parentSpan = scope.getSpan();
        if (parentSpan) {
          requestSpan = parentSpan.startChild({
            description: `${requestOptions.method || "GET"} ${requestUrl}`,
            op: "http.client"
          });
          if (shouldAttachTraceData(requestUrl)) {
            const sentryTraceHeader = requestSpan.toTraceparent();
            (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.logger.log(
              `[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to "${requestUrl}": `
            );
            requestOptions.headers = {
              ...requestOptions.headers,
              "sentry-trace": sentryTraceHeader
            };
            if (parentSpan.transaction) {
              const dynamicSamplingContext = parentSpan.transaction.getDynamicSamplingContext();
              const sentryBaggageHeader = baggage.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);
              let newBaggageHeaderField;
              if (!requestOptions.headers || !requestOptions.headers.baggage) {
                newBaggageHeaderField = sentryBaggageHeader;
              } else if (!sentryBaggageHeader) {
                newBaggageHeaderField = requestOptions.headers.baggage;
              } else if (Array.isArray(requestOptions.headers.baggage)) {
                newBaggageHeaderField = [...requestOptions.headers.baggage, sentryBaggageHeader];
              } else {
                newBaggageHeaderField = [requestOptions.headers.baggage, sentryBaggageHeader];
              }
              requestOptions.headers = {
                ...requestOptions.headers,
                // Setting a hader to `undefined` will crash in node so we only set the baggage header when it's defined
                ...newBaggageHeaderField && { baggage: newBaggageHeaderField }
              };
            }
          } else {
            (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.logger.log(
              `[Tracing] Not adding sentry-trace header to outgoing request (${requestUrl}) due to mismatching tracePropagationTargets option.`
            );
          }
        }
      }
      return originalRequestMethod.apply(httpModule, requestArgs).once("response", function(res) {
        const req = this;
        if (breadcrumbsEnabled) {
          addRequestBreadcrumb("response", requestUrl, req, res);
        }
        if (requestSpan) {
          if (res.statusCode) {
            requestSpan.setHttpStatus(res.statusCode);
          }
          requestSpan.description = http.cleanSpanDescription(requestSpan.description, requestOptions, req);
          requestSpan.finish();
        }
      }).once("error", function() {
        const req = this;
        if (breadcrumbsEnabled) {
          addRequestBreadcrumb("error", requestUrl, req);
        }
        if (requestSpan) {
          requestSpan.setHttpStatus(500);
          requestSpan.description = http.cleanSpanDescription(requestSpan.description, requestOptions, req);
          requestSpan.finish();
        }
      });
    };
  };
}
function addRequestBreadcrumb(event, url, req, res) {
  if (!hub.getCurrentHub().getIntegration(Http)) {
    return;
  }
  hub.getCurrentHub().addBreadcrumb(
    {
      category: "http",
      data: {
        method: req.method,
        status_code: res && res.statusCode,
        url
      },
      type: "http"
    },
    {
      event,
      request: req,
      response: res
    }
  );
}
exports.Http = Http;
//# sourceMappingURL=http.cjs.map
