{"version":3,"file":"http.js","sources":["../../../../../../../../node_modules/@sentry/node/esm/integrations/http.js"],"sourcesContent":["import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { getCurrentHub } from '@sentry/core';\nimport { parseSemver, logger, fill, dynamicSamplingContextToSentryBaggageHeader, stringMatchesSomePattern } from '@sentry/utils';\nimport { LRUMap } from 'lru_map';\nimport { normalizeRequestArgs, extractUrl, isSentryRequest, cleanSpanDescription } from './utils/http.js';\n\nconst NODE_VERSION = parseSemver(process.versions.node);\n\n/**\n * The http module integration instruments Node's internal http module. It creates breadcrumbs, transactions for outgoing\n * http requests and attaches trace data when tracing is enabled via its `tracing` option.\n */\nclass Http  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'Http';}\n\n  /**\n   * @inheritDoc\n   */\n   __init() {this.name = Http.id;}\n\n  /**\n   * @inheritDoc\n   */\n   constructor(options = {}) {Http.prototype.__init.call(this);\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = !options.tracing ? undefined : options.tracing === true ? {} : options.tracing;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce(\n    _addGlobalEventProcessor,\n    setupOnceGetCurrentHub,\n  ) {\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !this._tracing) {\n      return;\n    }\n\n    const clientOptions = _optionalChain([setupOnceGetCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getOptions, 'call', _5 => _5()]);\n\n    // Do not auto-instrument for other instrumenter\n    if (clientOptions && clientOptions.instrumenter !== 'sentry') {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('HTTP Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    // TODO (v8): `tracePropagationTargets` and `shouldCreateSpanForRequest` will be removed from clientOptions\n    // and we will no longer have to do this optional merge, we can just pass `this._tracing` directly.\n    const tracingOptions = this._tracing ? { ...clientOptions, ...this._tracing } : undefined;\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const httpModule = require('http');\n    const wrappedHttpHandlerMaker = _createWrappedRequestMethodFactory(this._breadcrumbs, tracingOptions, httpModule);\n    fill(httpModule, 'get', wrappedHttpHandlerMaker);\n    fill(httpModule, 'request', wrappedHttpHandlerMaker);\n\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n    if (NODE_VERSION.major && NODE_VERSION.major > 8) {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const httpsModule = require('https');\n      const wrappedHttpsHandlerMaker = _createWrappedRequestMethodFactory(\n        this._breadcrumbs,\n        tracingOptions,\n        httpsModule,\n      );\n      fill(httpsModule, 'get', wrappedHttpsHandlerMaker);\n      fill(httpsModule, 'request', wrappedHttpsHandlerMaker);\n    }\n  }\n}Http.__initStatic();\n\n// for ease of reading below\n\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedRequestMethodFactory(\n  breadcrumbsEnabled,\n  tracingOptions,\n  httpModule,\n) {\n  // We're caching results so we don't have to recompute regexp every time we create a request.\n  const createSpanUrlMap = new LRUMap(100);\n  const headersUrlMap = {};\n\n  const shouldCreateSpan = (url) => {\n    if (_optionalChain([tracingOptions, 'optionalAccess', _6 => _6.shouldCreateSpanForRequest]) === undefined) {\n      return true;\n    }\n\n    const cachedDecision = createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = tracingOptions.shouldCreateSpanForRequest(url);\n    createSpanUrlMap.set(url, decision);\n    return decision;\n  };\n\n  const shouldAttachTraceData = (url) => {\n    if (_optionalChain([tracingOptions, 'optionalAccess', _7 => _7.tracePropagationTargets]) === undefined) {\n      return true;\n    }\n\n    if (headersUrlMap[url]) {\n      return headersUrlMap[url];\n    }\n\n    headersUrlMap[url] = stringMatchesSomePattern(url, tracingOptions.tracePropagationTargets);\n\n    return headersUrlMap[url];\n  };\n\n  return function wrappedRequestMethodFactory(originalRequestMethod) {\n    return function wrappedMethod( ...args) {\n      const requestArgs = normalizeRequestArgs(httpModule, args);\n      const requestOptions = requestArgs[0];\n      const requestUrl = extractUrl(requestOptions);\n\n      // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n      if (isSentryRequest(requestUrl)) {\n        return originalRequestMethod.apply(httpModule, requestArgs);\n      }\n\n      let requestSpan;\n      let parentSpan;\n\n      const scope = getCurrentHub().getScope();\n\n      if (scope && tracingOptions && shouldCreateSpan(requestUrl)) {\n        parentSpan = scope.getSpan();\n\n        if (parentSpan) {\n          requestSpan = parentSpan.startChild({\n            description: `${requestOptions.method || 'GET'} ${requestUrl}`,\n            op: 'http.client',\n          });\n\n          if (shouldAttachTraceData(requestUrl)) {\n            const sentryTraceHeader = requestSpan.toTraceparent();\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n              logger.log(\n                `[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to \"${requestUrl}\": `,\n              );\n\n            requestOptions.headers = {\n              ...requestOptions.headers,\n              'sentry-trace': sentryTraceHeader,\n            };\n\n            if (parentSpan.transaction) {\n              const dynamicSamplingContext = parentSpan.transaction.getDynamicSamplingContext();\n              const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n              let newBaggageHeaderField;\n              if (!requestOptions.headers || !requestOptions.headers.baggage) {\n                newBaggageHeaderField = sentryBaggageHeader;\n              } else if (!sentryBaggageHeader) {\n                newBaggageHeaderField = requestOptions.headers.baggage;\n              } else if (Array.isArray(requestOptions.headers.baggage)) {\n                newBaggageHeaderField = [...requestOptions.headers.baggage, sentryBaggageHeader];\n              } else {\n                // Type-cast explanation:\n                // Technically this the following could be of type `(number | string)[]` but for the sake of simplicity\n                // we say this is undefined behaviour, since it would not be baggage spec conform if the user did this.\n                newBaggageHeaderField = [requestOptions.headers.baggage, sentryBaggageHeader] ;\n              }\n\n              requestOptions.headers = {\n                ...requestOptions.headers,\n                // Setting a hader to `undefined` will crash in node so we only set the baggage header when it's defined\n                ...(newBaggageHeaderField && { baggage: newBaggageHeaderField }),\n              };\n            }\n          } else {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n              logger.log(\n                `[Tracing] Not adding sentry-trace header to outgoing request (${requestUrl}) due to mismatching tracePropagationTargets option.`,\n              );\n          }\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalRequestMethod\n        .apply(httpModule, requestArgs)\n        .once('response', function ( res) {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('response', requestUrl, req, res);\n          }\n          if (requestSpan) {\n            if (res.statusCode) {\n              requestSpan.setHttpStatus(res.statusCode);\n            }\n            requestSpan.description = cleanSpanDescription(requestSpan.description, requestOptions, req);\n            requestSpan.finish();\n          }\n        })\n        .once('error', function () {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('error', requestUrl, req);\n          }\n          if (requestSpan) {\n            requestSpan.setHttpStatus(500);\n            requestSpan.description = cleanSpanDescription(requestSpan.description, requestOptions, req);\n            requestSpan.finish();\n          }\n        });\n    };\n  };\n}\n\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(event, url, req, res) {\n  if (!getCurrentHub().getIntegration(Http)) {\n    return;\n  }\n\n  getCurrentHub().addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        method: req.method,\n        status_code: res && res.statusCode,\n        url,\n      },\n      type: 'http',\n    },\n    {\n      event,\n      request: req,\n      response: res,\n    },\n  );\n}\n\nexport { Http };\n//# sourceMappingURL=http.js.map\n"],"names":["LRUMap"],"mappings":"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","x_google_ignoreList":[0]}