{"version":3,"file":"StartSliceMachineProcess.js","sources":["../../src/StartSliceMachineProcess.ts"],"sourcesContent":["/* eslint-disable no-console */\n\nimport type { AddressInfo } from \"node:net\";\nimport chalk from \"chalk\";\nimport open from \"open\";\n\nimport {\n\tPrismicUserProfile,\n\tSliceMachineManager,\n\tcreateSliceMachineManager,\n} from \"@slicemachine/manager\";\n\nimport { createSliceMachineExpressApp } from \"./lib/createSliceMachineExpressApp\";\nimport { setupSentry } from \"./lib/setupSentry\";\nimport { migrateSMJSON } from \"./legacyMigrations/migrateSMJSON\";\nimport { migrateAssets } from \"./legacyMigrations/migrateAssets\";\nimport { SLICE_MACHINE_NPM_PACKAGE_NAME } from \"./constants\";\n\nconst DEFAULT_SERVER_PORT = 9999;\n\ntype CreateStartSliceMachineProcessArgs = ConstructorParameters<\n\ttypeof StartSliceMachineProcess\n>;\n\nexport const createStartSliceMachineProcess = (\n\t...args: CreateStartSliceMachineProcessArgs\n): StartSliceMachineProcess => {\n\treturn new StartSliceMachineProcess(...args);\n};\n\nexport type StartSliceMachineProcessConstructorArgs = {\n\topen: boolean;\n\tport?: number;\n};\n\n/**\n * Manages the process that runs Slice Machine's server.\n */\nexport class StartSliceMachineProcess {\n\t/**\n\t * Determines if Slice Machine should automatically be opened once the server\n\t * starts.\n\t *\n\t * @defaultValue `false`\n\t */\n\topen: boolean;\n\n\t/**\n\t * The port on which to start the Slice Machine server.\n\t *\n\t * @defaultValue `9999`\n\t */\n\tport: number;\n\n\t/**\n\t * The Slice Machine manager used for the process.\n\t */\n\tprivate _sliceMachineManager: SliceMachineManager;\n\n\tconstructor(args: StartSliceMachineProcessConstructorArgs) {\n\t\tthis._sliceMachineManager = createSliceMachineManager();\n\n\t\tthis.open = args.open ?? false;\n\t\tthis.port = args.port ?? DEFAULT_SERVER_PORT;\n\t}\n\n\t/**\n\t * Runs the process.\n\t */\n\tasync run(): Promise<void> {\n\t\t// This migration needs to run before the plugins are initialised\n\t\t// Nothing can start without the config file\n\t\tawait migrateSMJSON(this._sliceMachineManager);\n\n\t\t// Initialize Segment and Sentry\n\t\tconst appVersion =\n\t\t\tawait this._sliceMachineManager.versions.getRunningSliceMachineVersion();\n\t\tawait this._sliceMachineManager.telemetry.initTelemetry({\n\t\t\tappName: SLICE_MACHINE_NPM_PACKAGE_NAME,\n\t\t\tappVersion,\n\t\t});\n\t\tconst isTelemetryEnabled =\n\t\t\tawait this._sliceMachineManager.telemetry.checkIsTelemetryEnabled();\n\t\tif (isTelemetryEnabled) {\n\t\t\tsetupSentry(this._sliceMachineManager);\n\t\t}\n\n\t\tawait this._sliceMachineManager.plugins.initPlugins();\n\n\t\t// TODO: MIGRATION - Move this to the Migration Manager\n\t\tawait migrateAssets(this._sliceMachineManager);\n\n\t\tawait this._validateProject();\n\n\t\tconst app = await createSliceMachineExpressApp({\n\t\t\tsliceMachineManager: this._sliceMachineManager,\n\t\t});\n\t\tconst server = app.listen(this.port);\n\t\tconst address = server.address() as AddressInfo;\n\t\tconst url = `http://localhost:${address.port}`;\n\n\t\tif (this.open) {\n\t\t\tawait open(url);\n\t\t}\n\n\t\tconsole.log();\n\t\tconsole.log(\n\t\t\tawait this._buildSliceMachineRunningLine(\n\t\t\t\t`Running at ${chalk.magenta(url)}`,\n\t\t\t),\n\t\t);\n\t\tconsole.log(await this._buildLoggedInAsLine(chalk.dim(\"Loading...\")));\n\t\tconsole.log();\n\n\t\tconst profile = await this._fetchProfile();\n\n\t\t// Non-TTY environments (like GitHub Actions) do not support line management.\n\t\tprocess.stdout.moveCursor?.(0, -2);\n\t\tprocess.stdout.clearLine?.(1);\n\t\tconsole.log(\n\t\t\tawait this._buildLoggedInAsLine(\n\t\t\t\tprofile\n\t\t\t\t\t? `${[profile.firstName, profile.lastName]\n\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t.join(\" \")} ${chalk.dim(`(${profile.email})`)}`\n\t\t\t\t\t: chalk.dim(\"Not logged in\"),\n\t\t\t),\n\t\t);\n\t\tconsole.log();\n\n\t\tif (profile) {\n\t\t\tthis._sliceMachineManager.telemetry.identify({\n\t\t\t\tuserID: profile.shortId,\n\t\t\t\tintercomHash: profile.intercomHash,\n\t\t\t});\n\t\t}\n\n\t\t// TODO(DT-1534): Uncomment to enable Puppeteer screenshots or delete if we decide to remove Puppeteer\n\t\t// // Prepare the manager for Slice Machine actions.\n\t\t// try {\n\t\t// \t// TODO: This try...catch statement is a temporary fix\n\t\t// \t// to let internal reviewers try Slice Machine without\n\t\t// \t// crashing early. We need to figure out how to\n\t\t// \t// properly install and load Puppeteer without this\n\t\t// \t// workaround.\n\t\t// \tawait this._sliceMachineManager.screenshots.initBrowserContext();\n\t\t// } catch {\n\t\t// \t// noop - We'll try again before taking a screenshot.\n\t\t// }\n\n\t\tif (profile) {\n\t\t\tawait Promise.allSettled([\n\t\t\t\t// noop - We'll try again when needed.\n\t\t\t\tthis._sliceMachineManager.user.refreshAuthenticationToken(),\n\t\t\t\t// noop - We'll try again before uploading a screenshot.\n\t\t\t\tthis._sliceMachineManager.screenshots.initS3ACL(),\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a string with Slice Machine info formatted for the console.\n\t *\n\t * @param value - Info to display.\n\t *\n\t * @returns String to pass to the console.\n\t */\n\tprivate async _buildSliceMachineRunningLine(value: string): Promise<string> {\n\t\tconst currentVersion =\n\t\t\tawait this._sliceMachineManager.versions.getRunningSliceMachineVersion();\n\n\t\treturn `${chalk.bgBlack(\n\t\t\t` ${chalk.bold.white(\"Slice Machine\")} ${chalk.magenta(\n\t\t\t\t`v${currentVersion}`,\n\t\t\t)} `,\n\t\t)} ${chalk.dim(\"→\")} ${value}`;\n\t}\n\n\t/**\n\t * Returns a string with logged in Prismic user info formatted for the\n\t * console.\n\t *\n\t * @param value - User info to display.\n\t *\n\t * @returns String to pass to the console.\n\t */\n\tprivate async _buildLoggedInAsLine(value: string): Promise<string> {\n\t\tconst currentVersion =\n\t\t\tawait this._sliceMachineManager.versions.getRunningSliceMachineVersion();\n\n\t\treturn `${chalk.bgBlack(\n\t\t\t`    ${\" \".repeat(currentVersion.length)}${chalk.bold(\"Logged in as\")} `,\n\t\t)} ${chalk.dim(\"→\")} ${value}`;\n\t}\n\n\t/**\n\t * Validates the project's config and content models.\n\t *\n\t * @throws Throws if a Library name is invalid.\n\t * @throws Throws if a Slice model is invalid.\n\t * @throws Throws if a Custom Type model is invalid.\n\t */\n\tprivate async _validateProject(): Promise<void> {\n\t\t// Validate Slice Machine config.\n\t\tconst config =\n\t\t\tawait this._sliceMachineManager.project.loadSliceMachineConfig();\n\n\t\t// Validate Library IDs\n\t\tconst invalidLibraries =\n\t\t\tconfig.libraries?.filter(\n\t\t\t\t(library) => library.startsWith(\"@\") || library.startsWith(\"~\"),\n\t\t\t) || [];\n\t\tif (invalidLibraries.length > 0) {\n\t\t\tthrow new Error(\n\t\t\t\t`The following Slice libraries have invalid names: ${invalidLibraries.join(\n\t\t\t\t\t\", \",\n\t\t\t\t)}. Slice library names must not start with \"@\" nor \"~\".`,\n\t\t\t);\n\t\t}\n\n\t\t// Validate Slice models.\n\t\tconst allSlices = await this._sliceMachineManager.slices.readAllSlices();\n\t\tif (allSlices.errors.length > 0) {\n\t\t\tthrow new Error(\n\t\t\t\t`Errors occurred while validating your project's slices.\\n\\n${allSlices.errors.join(\n\t\t\t\t\t\"\\n\\n\",\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\n\t\t// Validate Custom Type models.\n\t\tconst allCustomTypes =\n\t\t\tawait this._sliceMachineManager.customTypes.readAllCustomTypes();\n\t\tif (allCustomTypes.errors.length > 0) {\n\t\t\t// TODO: Provide better error message.\n\t\t\tthrow new Error(allCustomTypes.errors.join(\", \"));\n\t\t}\n\t}\n\n\t/**\n\t * Fetches the logged in Prismic user's profile. If the user is not logged in,\n\t * `undefined` is returned.\n\t *\n\t * @returns The logged in Prismic user's profile, or `undefined` if not logged\n\t *   in.\n\t */\n\tprivate async _fetchProfile(): Promise<PrismicUserProfile | undefined> {\n\t\tconst isLoggedIn = await this._sliceMachineManager.user.checkIsLoggedIn();\n\n\t\tif (isLoggedIn) {\n\t\t\treturn await this._sliceMachineManager.user.getProfile();\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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"}